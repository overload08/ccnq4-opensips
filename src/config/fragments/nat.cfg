# Name: nat
# Group: nat
# Description: handler for messages originating or terminating behind NAT

# -----------------------------------------------------------------
# NAT Traversal Section
# -----------------------------------------------------------------

# NAT Traversal for initial (NLR) messages.
route[nlr_nat]
{
  xlog("L_INFO","-- nlr_nat -- NAT tests for NLR $rm\n");

  # Do not process REGISTER here, there is a special method for it.
  # (Depending on the type of registrar we want different handling.)
  if(is_method("REGISTER")) {
    return;
  }

  # Treat CANCEL/PRACK/UPDATE as if they were NLR.
  if(is_method("CANCEL")||is_method("PRACK")||is_method("UPDATE")) {
    route(lr_detect_nat);
    return;
  }
  # ACK must also be treated as if it was NLR but requires special treatment.
  if(is_method("ACK")) {
    route(ack_nat);
    return;
  }
  # All other NLR requests go through initial NAT processing.
  route(initial_nat);
}

# Trigger keepalive for REGISTER/SUBSCRIBE/INVITE.
route[nat_keepalive] {
    if(is_method("REGISTER")||is_method("SUBSCRIBE")||is_method("INVITE")) {
      if(proto==UDP) { nat_keepalive(); }
    }
}

# NAT traversal for initial (NLR) INVITE/SUBSCRIBE/NOTIFY/OPTIONS
# and (LR) re-INVITE.
route[initial_nat]
{
  xlog("L_INFO","-- initial_nat -- NAT tests for initial $rm\n");

  # NAT tests:
  # NAT test 1 = RFC1918 IP in Contact ?
  # NAT test 2 = From IP+port != 1st Via
  if (client_nat_test("3") && !search("^Record-Route:")) {
    xlog("L_INFO","-- initial_nat-- $rm sender is NATed\n");

    # Record what we found.
    # (For IPv6 at this time we always proxy media if we can.)
    setflag(flag_request_mp_caller);

    if(af!=INET6) {
      # NAT detected
      force_rport();
      route(nat_keepalive);
    }
    fix_contact();
  }
}


# NAT traversal for loose-routed (in-dialog) messages.
route[lr_nat]
{
  xlog("L_INFO","-- lr_nat -- NAT tests for LR $rm\n");

  # Re-INVITE
  if(is_method("INVITE")) {
    # This might be overkill
    route(initial_nat);
    return;
  }
  # ACK response to Re-INVITE
  if(is_method("ACK")) {
    route(ack_nat);
    return;
  }
  # All others (BYE, ..)
  route(lr_detect_nat);
}

# NAT Traversal for Loose-Routed messages (BYE, .., but not Re-INVITE transactions)
# and CANCEL/UPDATE/PRACK
route[lr_detect_nat] {
  xlog("L_INFO","-- lr_detect_nat --\n");

  # NAT test 1 = RFC1918 IP in Contact ?
  # NAT test 2 = From IP+port != 1st Via ?
  if (client_nat_test("3")) {
    xlog("L_INFO","-- lr_detect_nat -- $rm sender is NATed\n");

    # XXX Shouldn't we set some flag somewhere?

    if(af!=INET6) {
      # NAT detected
      force_rport();
      route(nat_keepalive);
    }
    fix_contact();
  }
}

# NAT Traversal for ACK messages.
route[ack_nat] {
  xlog("L_INFO","-- ack_nat --\n");

  # Handle NAT on ACK
  xlog("L_INFO","-- ack_nat\n");
  if(isflagset(flag_request_mp_caller)) {
    if(af!=INET6) {
      force_rport();
      route(nat_keepalive);
    }
  }
  # NAT test 1 = RFC1918 IP in Contact ?
  # NAT test 2 = From IP+port != 1st Via ?
  # NAT test 8 = IP in Contact != source IP
  if (client_nat_test("11")) {
    fix_contact();
  }
}

# NAT Traversal for REGISTER messages.
define has_register_nat
route[register_nat] {
  xlog("L_INFO","-- register_nat --\n");

  # NAT test 1 = RFC1918 IP in Contact ?
  # NAT test 2 = From IP+port != 1st Via ?
  # NAT test 4 = RFC1918 in top Via ?
  if (client_nat_test("7") && !search("^Contact:[ ]*\*")) {
      xlog("L_INFO","-- register_nat: Registering device is NATed\n");
      # branch flag to indicate that the endpoint is NATed
      # it is stored in the database by usrloc (registrar)
      setbflag(bflag_request_mp_callee);
      if(af!=INET6) {
        force_rport();
        route(nat_keepalive);
        if(proto==TCP) {
          setflag(flag_tcp_persistent); # tcp_persistent_flag
        }
      }
  };
}

define has_onreply_nat
route[onreply_nat] {

  xlog("L_INFO","-- onreply_nat --\n");

      # NAT test 1 = RFC1918 IP in Contact ?
      if( client_nat_test("1") ) {
        fix_contact();
      }

}
