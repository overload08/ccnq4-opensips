# Name: forwarder
# Description: Default message forwarder (for anything except ACK, PRACK, CANCEL and UPDATE); adds var-based headers and forward messages using t_relay()

# -------------------------------------------------------------------
# Default Message Forwarder (anything except ACK/PRACK/CANCEL/UPDATE)
# -------------------------------------------------------------------

define has_forwarder
set dflag_cleanup_headers to 1

route[cleanup_headers] {
  xlog("L_INFO","$Tf -- route(cleanup_headers)\n");
  remove_hf("X-CCNQ*","g");
}

route[initial_forwarder] {
  xlog("L_INFO","$Tf -- route(initial_forwarder) Processing $rm $ru\n");

  if do_not_forward_register
  if(is_method("REGISTER")) {
      send_reply("500","Unsupported REGISTER");
      exit;
  }
  end if do_not_forward_register

  if( $var(cleanup_headers) ) {
    if has_dialog_module
      set_dlg_flag("${dflag_cleanup_headers}");
    end if has_dialog_module
    if not has_dialog_module
      route(cleanup_headers);
    end if not has_dialog_module
  }

# hdr.X-CCNQ3-Endpoint The originating endpoint (for a call coming from a subscriber).
  remove_hf("X-CCNQ3-Endpoint");
  if not ignore_src_endpoint
  if($json(src_endpoint/endpoint)) {
    append_hf("X-CCNQ3-Endpoint: $(json(src_endpoint/endpoint))\r\n");
  }
  end if not ignore_src_endpoint

# hdr.P-Charge-Info The username of the header is the account; the domain part is copied from the Request URI. For a call coming from a subscriber, the account value is taken from doc.src_endpoint.account.
  remove_hf("P-Charge-Info");
  if not ignore_account
  if($(avp(account))) {
    # Add a P-Charge-Info header.
    # The username part is the account, while the domain part is copied from the RURI.
    append_hf("P-Charge-Info: sip:$(avp(account){s.escape.user})@$rd\r\n");
  }
  end if not ignore_account

# hdr.X-CCNQ3-Extra Optional extraneous data (about the client-side user placing a call).
  if not ignore_extra_info
  if($avp(extra_info)) {
    append_hf("X-CCNQ3-Extra: $avp(extra_info)\r\n");
  }
  end if not ignore_extra_info

  t_on_branch("initial_forwarder");
  serialize_branches(1);

  route(forwarder);
}

branch_route[initial_forwarder] {
  $var(idx) = $T_branch_idx;
}

route[forwarder] {
  xlog("L_INFO","$Tf -- forwarder -- t_relay $rm $ru\n");

  if has_dialog_module
    if( is_dlg_flag_set("${dflag_cleanup_headers}") ) {
      route(cleanup_headers);
    }
  end if has_dialog_module

  if do_not_forward_register
  if(is_method("REGISTER")) {
      send_reply("500","Unsupported REGISTER");
      exit;
  }
  end if do_not_forward_register

  if (!t_relay("0x01")) { # Prevent dup 100
    send_reply("500","Transmission failure");
  }
  exit;
}

# -----------------------------------------------------------------
# Forward ACK, PRACK, CANCEL, and UPDATE
# -----------------------------------------------------------------

route[forwarder_progress]
{
  xlog("L_INFO","$Tf -- forwarder-progress -- ACK/PRACK/CANCEL/UPDATE Processing $rm $ru\n");

  # CANCEL is always in-transaction.
  if(is_method("CANCEL")) {
    if(!t_check_trans()) {
      xlog("L_INFO", "$Tf -- forwarder-progress -- Dropping mis-routed $rm (481)\n");
      send_reply("481", "Call/Transaction Does Not Exist");
      exit;
    }
  }

  # ACK creates a new transactions IFF the INVITE response was a 2xx response (it may contain SDP etc. and is generated by the UAC TU layer; also is end-to-end).
  # Otherwise ACK stays in the same transaction (because it cannot contain SDP etc. and can be generated by the TL layer; also, is hop-by-hop since any element in the path may generate error).
  if(is_method("ACK")) {
    if($DLG_status==NULL) {
      if(!t_check_trans()) {
        xlog("L_INFO", "$Tf -- forwarder-progress -- Dropping mis-routed $rm (481)\n");
        # In case of doubt, skip the exit() and let the endpoint take care of handling the ACK.
        exit;
      }
    }
  }

  # PRACK and UPDATE both create new transactions.

  xlog("L_INFO", "$Tf -- forwarder-progress -- t_relay $rm $ru\n");
  if(!t_relay("0x01")) { # Prevent dup 100
    # t_relay failed
    if (is_method("ACK")) {
      xlog("L_INFO", "$Tf -- forwarder-progress -- t_relay failed, dropping ACK\n");
    } else { # Can't send a reply to an ACK
      send_reply("500","Transmission failure");
    }
  }
  exit;
}
