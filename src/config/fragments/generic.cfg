# Name: generic.cfg
# Required
# Description: main route statement

macro get_id /* _id name next */

  $avp($2_id) := null;
  $avp($2_id) = $1;
  if(cache_fetch("local","$avp($2_id)",$avp($2))) {
    # Fake a successful GET
    $avp($2_retcode) = '200';
    xlog("L_INFO","$Tf -- get_id $2 -- cache_fetch $avp($2_id) OK -- then $3 --\n");
    $avp($2_save) = 0;
    route($3);
  } else {
    xlog("L_INFO","$Tf -- get_id $2 -- GET ${provisioning}/$avp($2_id) -- then $3 --\n");
    $avp($2_save) = 1;
    if use_async_rest
    async( rest_get("${provisioning}/$avp($2_id)","$avp($2)","$avp($2_ctype)","$avp($2_retcode)"), $3);
    end if use_async_rest
    if not use_async_rest
    rest_get("${provisioning}/$avp($2_id)","$avp($2)","$avp($2_ctype)","$avp($2_retcode)");
    route($3);
    end if not use_async_rest
  }

end macro get_id

macro save_id /* name */

  xlog("L_INFO","$Tf -- save_id $1 -- GET $avp($1_id) returned: $avp($1_retcode), $avp($1_ctype), $avp($1) --\n");

  # retcode will be <null> in case of timeout
  if(!$avp($1_retcode)) {
    send_reply('500','Database unavailable');
    exit;
  }
  if($avp($1_retcode) == '0') {
    send_reply('500','Database unavailable');
    exit;
  }

  # We only save in the cache again if we got a positive indication that either
  # we got a valid value (200 response) or the record actually does not exist (404 response).

  if($avp($1_retcode) == '200') {
    $json($1) := $avp($1);
  } else {
    $json($1) := '{}';

    if($avp($1_retcode) == '404') {
      $avp($1_save) = 1;
    } else {
      $avp($1_save) = 0;
    }
  }

  # Save the JSON back into the AVP
  $avp($1) := null;
  $avp($1) = $json($1);

  # Save the AVP in the cache
  if( $avp($1_save) ) {
    cache_store("local","$avp($1_id)","$avp($1)",${cache_timeout});
  }

end macro save_id

# ROUTING

startup_route {
  xlog("L_INFO","$Tf -- startup_route()\n");

  # Custom startup code fragment
  ${startup_route_code}
}

# Follow the tangible data model
macro tangible
  $json(event/application) = '${pkg_name}:${model}';
  $json(event/host) = '${__hostname}';
  $json(event/stamp) = $time(%FT%T%z);
  $json(event/now) = $time('%s000');
end macro tangible

event_route[E_CORE_THRESHOLD,sync] {
  $json(event) := '{}';
  $json(event/event) = 'core_threshold';
  ${tangible}
  fetch_event_params("source=$json(event/source);time=$json(event/time);extra=$json(event/extra)");
  if redis_notify
  cache_raw_query("redis","PUBLISH opensips:$json(event/event) $json(event)");
  end if redis_notify
}
event_route[E_CORE_PKG_THRESHOLD,sync] {
  $json(event) := '{}';
  $json(event/event) = 'core_pkg_threshold';
  ${tangible}
  fetch_event_params("usage=$json(event/usage);threshold=$json(event/threshold);used=$json(event/used);size=$json(event/size);pid=$json(event/pid)");
  if redis_notify
  cache_raw_query("redis","PUBLISH opensips:$json(event/event) $json(event)");
  end if redis_notify
}
event_route[E_CORE_SHM_THRESHOLD,sync] {
  $json(event) := '{}';
  $json(event/event) = 'core_shm_threshold';
  ${tangible}
  fetch_event_params("usage=$json(event/usage);threshold=$json(event/threshold);used=$json(event/used);size=$json(event/size)");
  if redis_notify
  cache_raw_query("redis","PUBLISH opensips:$json(event/event) $json(event)");
  end if redis_notify
}

/* Other events:
  E_DLG_STATE_CHANGED
  E_UL_AOR_INSERT
  E_UL_AOR_DELETE
  E_UL_CONTACT_INSERT
  E_UL_CONTACT_DELETE
  E_UL_CONTACT_UPDATE
*/

if event_limits
event_route[E_SCRIPT_ENDPOINT_RATE_LIMIT,sync] {
  $json(event) := '{}';
  $json(event/event) = 'endpoint_rate_limit';
  ${tangible}
  fetch_event_params("direction=$json(event/direction);endpoint=$json(event/endpoint);limit=$json(event/limit);ip=$json(event/ip)");
  if redis_notify
  cache_raw_query("redis","PUBLISH opensips:$json(event/event) $json(event)");
  end if redis_notify
}

event_route[E_SCRIPT_ENDPOINT_OUT_OF_CHANNELS,sync] {
  $json(event) := '{}';
  $json(event/event) = 'endpoint_out_of_channels';
  ${tangible}
  fetch_event_params("direction=$json(event/direction);endpoint=$json(event/endpoint);max_channels=$json(event/max_channels);current_channels=$json(event/current_channels);ip=$json(event/ip)");
  if redis_notify
  cache_raw_query("redis","PUBLISH opensips:$json(event/event) $json(event)");
  end if redis_notify
}
end if event_limits

if event_invalid
event_route[E_SCRIPT_INVALID,sync] {
  $json(event) := '{}';
  $json(event/event) = 'invalid';
  ${tangible}
  fetch_event_params("endpoint=$json(event/endpoint);ip=$json(event/ip)");
  if redis_notify
  cache_raw_query("redis","PUBLISH opensips:$json(event/event) $json(event)");
  end if redis_notify
}
end if event_invalid

route
{
  # Short-circuit NAT traversal pings.
  if not skip_notify_shortcut
  if(is_method("NOTIFY") && !$rU) {
    if(af!=INET6) {
      force_rport();
    }
    sl_send_reply("200","Maybe");
    exit;
  }
  end if not skip_notify_shortcut
  if not skip_options_shortcut
  if(is_method("OPTIONS")) {
    if(af!=INET6) {
      force_rport();
    }
    append_hf("Allow: INVITE, ACK, CANCEL, OPTIONS, BYE\r\n");
    sl_send_reply("200","Maybe");
    exit;
  }
  end if not skip_options_shortcut

  route(initialize);

  xlog("L_INFO","$Tf -- route() -- $rm -- From: $fu -- To: $tu -- RURI: $ru\n");

  # Loose-Route means the Route has an 'lr' parameter.
  # The 'lr' parameter is set when we set the 'lr' parameter of our Record-Route header in a forward message (typically INVITE) and that header was reflected back in responses coming from the callee.
  # It might however also be set in order to bypass authentication, in which case we need to be careful how we check it.

  # `loose_route()` will fail on initial messages when using `support_alternate_domains`, if the client sends a preloaded Route for one of the alternate domains. (Pre-loaded Routes will have the `lr` parameter set.)

  if(loose_route()) {
    if loose_route
    route(loose_route_handler);
    end if loose_route
    # If the script provides no loose_route handler then we should reject any attempt to use us as a loose router.
    if not loose_route
    send_reply("403","Invalid loose-route");
    end if not loose_route
    exit;
  }

    $var(domain_ok) = 0;

    if skip_domain_check
      $var(domain_ok) = 1;
    end if skip_domain_check

    if sip_domain_name
    if( $rd == "${sip_domain_name}" ) {
      $var(domain_ok) = 1;
    }
    end if sip_domain_name
    if presence_domain_name
    if( $rd == "${presence_domain_name}" ) {
      $var(domain_ok) = 1;
    }
    end if presence_domain_name

    # Check whether the domain is local.
    if($var(domain_ok)) {
      route(non_loose_route_handler);
      exit;
    } else {
      if not support_alternate_domains
      route(non_local_uri_handler);
      exit;
      end if not support_alternate_domains
      if support_alternate_domains
      if(is_domain_local("$rd")) {
        route(non_loose_route_handler);
        exit;
      } else {
        route(non_local_uri_handler);
        exit;
      }
      end if support_alternate_domains
    }
}
