# Name: generic.cfg
# Required
# Description: main route statement

# ROUTING

startup_route {
  xlog("L_DBG","-- startup_route()\n");
  if notify
    subscribe_event("E_CORE_THRESHOLD","event:E_CORE_THRESHOLD");
    subscribe_event("E_CORE_PKG_THRESHOLD","event:E_CORE_PKG_THRESHOLD");
    subscribe_event("E_CORE_SHM_THRESHOLD","event:E_CORE_SHM_THRESHOLD");
    subscribe_event("E_PIKE_BLOCKED","event:E_PIKE_BLOCKED");

    subscribe_event("E_SCRIPT_REPORT","event:E_SCRIPT_REPORT");
    subscribe_event("E_SCRIPT_REGISTER","event:E_SCRIPT_REGISTER");
    subscribe_event("E_SCRIPT_REGISTRANT_FAILURE","event:E_SCRIPT_REGISTRANT_FAILURE");

    subscribe_event("E_SCRIPT_NUMBER_RATE_LIMIT","event:E_SCRIPT_NUMBER_RATE_LIMIT");
    subscribe_event("E_SCRIPT_NUMBER_OUT_OF_CHANNELS","event:E_SCRIPT_NUMBER_OUT_OF_CHANNELS");
    subscribe_event("E_SCRIPT_ENDPOINT_RATE_LIMIT","event:E_SCRIPT_ENDPOINT_RATE_LIMIT");
    subscribe_event("E_SCRIPT_ENDPOINT_OUT_OF_CHANNELS","event:E_SCRIPT_ENDPOINT_OUT_OF_CHANNELS");

    $avp(event-names) := null;
    $avp(event-values) := null;
    $avp(event-names) = "event";
    $avp(event-values) = "startup";
    raise_event("E_SCRIPT_REPORT",$avp(event-names),$avp(event-values));

  end if notify
  ${startup_route_code}
}

if notify
event_route[E_CORE_THRESHOLD] {
  $json(event) := '{}';
  fetch_event_params("source=$json(event/source);time=$json(event/time);extra=$json(event/extra)");
  rest_post("${notify}/core_threshold","$json(event)","application/json","$var(body)","$var(type)","$var(code)");
}
event_route[E_CORE_PKG_THRESHOLD] {
  $json(event) := '{}';
  fetch_event_params("usage=$json(event/usage);threshold=$json(event/threshold);used=$json(event/used);size=$json(event/size);pid=$json(event/pid)");
  rest_post("${notify}/core_pkg_threshold","$json(event)","application/json","$var(body)","$var(type)","$var(code)");
}
event_route[E_CORE_SHM_THRESHOLD] {
  $json(event) := '{}';
  fetch_event_params("usage=$json(event/usage);threshold=$json(event/threshold);used=$json(event/used);size=$json(event/size)");
  rest_post("${notify}/core_shm_threshold","$json(event)","application/json","$var(body)","$var(type)","$var(code)");
}
event_route[E_PIKE_BLOCKED] {
  $json(event) := '{}';
  fetch_event_params("ip=$json(event/ip)");
  rest_post("${notify}/pike_blocked","$json(event)","application/json","$var(body)","$var(type)","$var(code)");
}

event_route[E_SCRIPT_REPORT] {
  $json(event) := '{}';
  fetch_event_params("event=$json(event/event)");
  rest_post("${notify}/script_report","$json(event)","application/json","$var(body)","$var(type)","$var(code)");
}

event_route[E_SCRIPT_REGISTER] {
  $json(event) := '{}';
  fetch_event_params("endpoint=$json(event/endpoint);ip=$json(event/ip)");
  rest_post("${notify}/script_register","$json(event)","application/json","$var(body)","$var(type)","$var(code)");
}

event_route[E_SCRIPT_NUMBER_RATE_LIMIT] {
  $json(event) := '{}';
  fetch_event_params("direction=$json(event/direction);number=$json(event/number);limit=$json(event/limit);ip=$json(event/ip)");
  rest_post("${notify}/script_number_rate_limit","$json(event)","application/json","$var(body)","$var(type)","$var(code)");
}

event_route[E_SCRIPT_ENDPOINT_RATE_LIMIT] {
  $json(event) := '{}';
  fetch_event_params("direction=$json(event/direction);endpoint=$json(event/endpoint);limit=$json(event/limit);ip=$json(event/ip)");
  rest_post("${notify}/script_endpoint_rate_limit","$json(event)","application/json","$var(body)","$var(type)","$var(code)");
}

event_route[E_SCRIPT_NUMBER_OUT_OF_CHANNELS] {
  $json(event) := '{}';
  fetch_event_params("direction=$json(event/direction);number=$json(event/number);max_channels=$json(event/max_channels);current_channels=$json(event/current_channels);ip=$json(event/ip)");
  rest_post("${notify}/script_number_out_of_channels","$json(event)","application/json","$var(body)","$var(type)","$var(code)");
}

event_route[E_SCRIPT_ENDPOINT_OUT_OF_CHANNELS] {
  $json(event) := '{}';
  fetch_event_params("direction=$json(event/direction);endpoint=$json(event/endpoint);max_channels=$json(event/max_channels);current_channels=$json(event/current_channels);ip=$json(event/ip)");
  rest_post("${notify}/script_endpoint_out_of_channels","$json(event)","application/json","$var(body)","$var(type)","$var(code)");
}

event_route[E_SCRIPT_REGISTRANT_FAILURE] {
  $json(event) := '{}';
  fetch_event_params("auth_username=$json(event/auth_username);auth_domain=$json(event/auth_domain);ip=$json(event/ip)");
  rest_post("${notify}/script_registrant_failure","$json(event)","application/json","$var(body)","$var(type)","$var(code)");
}

end if notify

route
{
  route(initialize);

  xlog("L_DBG","-- route() -- $rm -- From: $fu -- To: $tu -- RURI: $ru\n");

  if(loose_route()) {
    route(loose_route_handler);
    exit;
  } else {
    $avp(domain) := null;
    if( $rd == "${sip_domain_name}" ) {
      $avp(domain) = "${sip_domain_name}";
    }
    if support_alternate_domains
    else {
      # Cache the domains we support.
      if(!cache_fetch("local","domain $rd",$avp(domain))) {
        rest_get("${provisioning}/domain:$rd","$avp(domain)");
        cache_store("local","domain $rd","$avp(domain)",${cache_timeout});
      }
    }
    end if support_alternate_domains

    if skip_domain_check
    $avp(domain) = 'no-such-domain';
    end if skip_domain_check

    # Check whether the domain is local.
    if(is_avp_set("$avp(domain)")) {
      route(non_loose_route_handler);
      exit;
    } else {
      route(non_local_uri_handler);
      exit;
    }
  }
}
