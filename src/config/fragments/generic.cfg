# Name: generic.cfg
# Required
# Description: main route statement

# ROUTING

startup_route {
  xlog("L_DBG","-- startup_route()\n");
  if notify
    $avp(event-names) := null;
    $avp(event-values) := null;
    $avp(event-names) = "event";
    $avp(event-values) = "startup";
    raise_event("E_SCRIPT_REPORT",$avp(event-names),$avp(event-values));

  end if notify

  if support_alternate_domains
    if(rest_get("${provisioning}/_all_docs?startkey=\"domain:\"&endkey=\"domain;\"&include_docs=true","$avp(json)")) {
      $json(domains) := $avp(json);
      $var(i) = 0;
      while( $json(row) := $json(domains/rows[$var(i)]) ) {
        $var(name) = $json(row/doc/domain);
        xlog("L_DBG","-- startup_route() caching domain $var(name) \n");
        cache_store("local","domain $var(name)");"
      }
    }
  end if support_alternate_domains

  # Custom startup code fragment
  ${startup_route_code}
}

if notify
event_route[E_CORE_THRESHOLD] {
  $json(event) := '{}';
  fetch_event_params("source=$json(event/source);time=$json(event/time);extra=$json(event/extra)");
  async(rest_post("${notify}/core_threshold","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}
event_route[E_CORE_PKG_THRESHOLD] {
  $json(event) := '{}';
  fetch_event_params("usage=$json(event/usage);threshold=$json(event/threshold);used=$json(event/used);size=$json(event/size);pid=$json(event/pid)");
  async(rest_post("${notify}/core_pkg_threshold","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}
event_route[E_CORE_SHM_THRESHOLD] {
  $json(event) := '{}';
  fetch_event_params("usage=$json(event/usage);threshold=$json(event/threshold);used=$json(event/used);size=$json(event/size)");
  async(rest_post("${notify}/core_shm_threshold","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}
event_route[E_PIKE_BLOCKED] {
  $json(event) := '{}';
  fetch_event_params("ip=$json(event/ip)");
  async(rest_post("${notify}/pike_blocked","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}
event_route[E_UL_AOR_INSERT] {
  $json(event) := '{}';
  fetch_event_params("aor=$json(event/aor)");
  async(rest_post("${notify}/ul_aor_insert","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}
event_route[E_UL_AOR_DELETE] {
  $json(event) := '{}';
  fetch_event_params("aor=$json(event/aor)");
  async(rest_post("${notify}/ul_aor_delete","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}

event_route[E_SCRIPT_REPORT] {
  $json(event) := '{}';
  fetch_event_params("event=$json(event/event)");
  async(rest_post("${notify}/script_report","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}

event_route[E_SCRIPT_REGISTER] {
  $json(event) := '{}';
  fetch_event_params("endpoint=$json(event/endpoint);ip=$json(event/ip)");
  async(rest_post("${notify}/script_register","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}

event_route[E_SCRIPT_NUMBER_RATE_LIMIT] {
  $json(event) := '{}';
  fetch_event_params("direction=$json(event/direction);number=$json(event/number);limit=$json(event/limit);ip=$json(event/ip)");
  async(rest_post("${notify}/script_number_rate_limit","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}

event_route[E_SCRIPT_ENDPOINT_RATE_LIMIT] {
  $json(event) := '{}';
  fetch_event_params("direction=$json(event/direction);endpoint=$json(event/endpoint);limit=$json(event/limit);ip=$json(event/ip)");
  async(rest_post("${notify}/script_endpoint_rate_limit","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}

event_route[E_SCRIPT_NUMBER_OUT_OF_CHANNELS] {
  $json(event) := '{}';
  fetch_event_params("direction=$json(event/direction);number=$json(event/number);max_channels=$json(event/max_channels);current_channels=$json(event/current_channels);ip=$json(event/ip)");
  async(rest_post("${notify}/script_number_out_of_channels","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}

event_route[E_SCRIPT_ENDPOINT_OUT_OF_CHANNELS] {
  $json(event) := '{}';
  fetch_event_params("direction=$json(event/direction);endpoint=$json(event/endpoint);max_channels=$json(event/max_channels);current_channels=$json(event/current_channels);ip=$json(event/ip)");
  async(rest_post("${notify}/script_endpoint_out_of_channels","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}

event_route[E_SCRIPT_REGISTRANT_FAILURE] {
  $json(event) := '{}';
  fetch_event_params("auth_username=$json(event/auth_username);auth_domain=$json(event/auth_domain);ip=$json(event/ip)");
  async(rest_post("${notify}/script_registrant_failure","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}

event_route[E_SCRIPT_INVALID] {
  $json(event) := '{}';
  fetch_event_params("endpoint=$json(event/endpoint);ip=$json(event/ip)");
  async(rest_post("${notify}/script_invalid","$json(event)","application/json","$var(body)","$var(type)","$var(code)"),notification_done);
}

route[notification_done] {
  xlog("L_DBG","-- notification_done()\n");
}

end if notify

route
{
  # Short-circuit NAT traversal pings.
  if not skip_notify_shortcut
  if(is_method("NOTIFY") && !$rU) {
    sl_send_reply("200","Maybe");
    exit;
  }
  end if not skip_notify_shortcut
  if not skip_options_shortcut
  if(is_method("OPTIONS")) {
    append_hf("Allow: INVITE, ACK, CANCEL, OPTIONS, BYE\r\n");
    sl_send_reply("200","Maybe");
    exit;
  }
  end if not skip_options_shortcut

  route(initialize);

  xlog("L_DBG","-- route() -- $rm -- From: $fu -- To: $tu -- RURI: $ru\n");

  # Loose-Route means the Route has an 'lr' parameter.
  # The 'lr' parameter is set when we set the 'lr' parameter of our Record-Route header in a forward message (typically INVITE) and that header was reflected back in responses coming from the callee.
  # It might however also be set in order to bypass authentication, in which case we need to be careful how we check it.
  if(loose_route()) {
    if loose_route
    route(loose_route_handler);
    end if loose_route
    # If the script provides no loose_route handler then we should reject any attempt to use us as a loose router.
    if not loose_route
    send_reply("403","Invalid loose-route");
    end if not loose_route
    exit;
  } else {

    $var(domain_ok) = 0;

    if skip_domain_check
      $var(domain_ok) = 1;
    end if skip_domain_check

    if sip_domain_name
    if( $rd == "${sip_domain_name}" ) {
      $var(domain_ok) = 1;
    }
    end if sip_domain_name

    if support_alternate_domains
    if(!$var(domain_ok)) {
      if(cache_fetch("local","domain $rd")) {
        $var(domain_ok) = 1;
      }
    }
    end if support_alternate_domains

    # Check whether the domain is local.
    if($var(domain_ok)) {
      route(non_loose_route_handler);
      exit;
    } else {
      route(non_local_uri_handler);
      exit;
    }
  }
}

macro get_id /* _id name next */

  $avp($2_id) := null;
  $avp($2_id) = $1;
  if(cache_fetch("local","$avp($2_id)",$avp($2))) {
    route($3);
  } else {
    xlog("L_DBG","-- $2 -- GET ${provisioning}/$avp($2_id) -- then $3 --\n");
    async( rest_get("${provisioning}/$avp($2_id)","$avp($2)","$avp($2_ctype)","$avp($2_retcode)"), $3);
  }

end macro get_id

macro save_id /* name */

  xlog("L_DBG","-- $1 -- GET $avp($1_id) returned $avp($1) $avp($1_ctype) $avp($1_retcode) --\n");

  if($rc < 0 || $avp($1_retcode) == '0') {
    send_reply('500','Database unavailable');
    exit;
  }

  if($avp($1_retcode) == '200') {
    $json($1) := $avp($1);
  } else {
    $json($1) := '{}';
  }

  # Save the JSON back into the AVP
  $avp($1) := null;
  $avp($1) = $json($1);

  # Save the AVP in the cache
  cache_store("local","$avp($1_id)","$avp($1)",${cache_timeout});

end macro save_id
