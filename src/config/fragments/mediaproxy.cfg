# Name: mediaproxy
# Group: mediaproxy
# Description: handler for MediaProxy (SDP with NAT)

define mediaproxy
set dflag_mediaproxy_engaged to 2
set dflag_mediaproxy to 3

# -----------------------------------------------------------------
# Media Proxy / RTP Proxy handling
# -----------------------------------------------------------------

route[start_media_proxy]
{
  xlog("L_INFO","-- start_media_proxy --\n");

  if not mp_allowed
    xlog("L_INFO","-- start_media_proxy -- Media Proxy is not allowed.\n");
    return;
  end if not mp_allowed

  if mp_allowed
    if( is_dlg_flag_set("${dflag_mediaproxy_engaged}") ) {
      xlog("L_INFO","-- start_media_proxy -- bypassing media_proxy\n");
      return;
    }

    if( is_present_hf("X-CCNQ3-MediaProxy") ) {
      xlog("L_INFO","-- start_media_proxy -- media_proxy already engaged on another proxy\n");
      set_dlg_flag("${dflag_mediaproxy_engaged}");
      return;
    }

    remove_hf("X-CCNQ3-MediaProxy");
    append_hf("X-CCNQ3-MediaProxy: ${__hostname}\r\n");

    if( use_media_proxy() ) {
      xlog("L_INFO","-- start_media_proxy -- media_proxy OK\n");
      set_dlg_flag("${dflag_mediaproxy}");
    } else {
      xlog("L_INFO","-- start_media_proxy -- media_proxy failed or not needed\n");
    }
  end if mp_allowed
}

route[stop_media_proxy]
{
  xlog("L_INFO","-- stop_media_proxy --\n");

  if not mp_allowed
    xlog("L_INFO","-- stop_media_proxy -- Media proxy is not allowed.\n");
    return;
  end if not mp_allowed

  if mp_allowed
    if( is_dlg_flag_set("${dflag_mediaproxy}")) {
      end_media_session();
      reset_dlg_flag("${dflag_mediaproxy}");
    }
  end if mp_allowed
}

# -----------------------------------------------------------------
# Reply-codes handler for NAT traversal
# -----------------------------------------------------------------

route[media_proxy_method_handler]
{
  xlog("L_INFO","-- media_proxy_method_handler --\n");

  if( is_method("INVITE") || is_method("ACK") ) {
    route(update_media_proxy);
  }
  if(is_method("BYE") || is_method("CANCEL")) {
    route(stop_media_proxy);
  }
}

route[media_proxy_reply_handler] # Reply handler for MediaProxy
{
  xlog("L_INFO","-- media_proxy_reply_handler --\n");

    # Update the mediaproxy information if needed.
    if(t_check_status("180|183|2[0-9][0-9]")) {
        route(update_media_proxy);  # Update media session
    }
    # Don't tear-down on error, we might fail over.
}

# -----------------------------------------------------------------
# A RURI may contain a "mp=yes" param to force usage of MP
# Note: This is independent from having mp=yes added to Record-Route
# params (and provided back by endpoints in Route params).
# -----------------------------------------------------------------

route[media_proxy_in_ruri] {

  xlog("L_INFO","-- media_proxy_in_ruri --\n");

  # If the URI contains ";mp=yes" then force MediaProxy.
  if($(ru{uri.param,mp}) == "yes") {
    xlog("L_INFO","-- media_proxy_in_ruri -- MediaProxy requested in RURI\n");
    setflag(flag_request_mp_callee); # force MP for callee
  }

}


route[update_media_proxy]
{
  xlog("L_INFO","-- update_media_proxy --\n");

  if( ${mp_always} ||
      is_dlg_flag_set("${dflag_mediaproxy}") ||
      isflagset(flag_request_mp_callee) ||
      isbflagset(bflag_request_mp_callee) ||
      isflagset(flag_request_mp_caller)
    ) {
    if( search("^Content-Length:")
        && !search("^Content-Length:[ ]*0")
      ) {
      route(start_media_proxy);
    } else {
      xlog("L_INFO","-- update_media_proxy -- Media Proxy required but no SDP found\n");
    }
  } else {
    xlog("L_INFO","-- update_media_proxy -- Skipping Media Proxy\n");
  }
}
