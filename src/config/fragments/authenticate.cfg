# Name: authenticate
# Group: authenticate
# Description: authenticate INVITE or REGISTER; populates `src_endpoint` based on IP or username
# Parameters:
#   authentication: should be `database`

# ----------
# Tools
# ----------

define event_invalid

# Send event in case of forgery / scan attempt / ...
route[notify_authenticate_invalid] {
  xlog("L_INFO","$Tf -- notify_authenticate_invalid\n");
  if notify
  $avp(event-names) := null;
  $avp(event-values) := null;
  $avp(event-names) = "endpoint";
  $avp(event-values) = $avp(endpoint_key);
  $avp(event-names) = "ip";
  $avp(event-values) = $si;
  raise_event("E_SCRIPT_INVALID",$avp(event-names),$avp(event-values));
  end if notify
  exit;
}

# Prepare endpoint_key for authentication
route[authenticating_endpoint] {
  $avp(endpoint_key) := null;
  $avp(realm) := null;

  # If realm variable is empty, the request's From header's domain is used as realm.
  $var(realm) = "${challenge}";

  if fragment__realm
    ${fragment__realm}
  end if fragment__realm

  $avp(realm) = $var(realm);

  if(!$aU) {
    xlog("L_INFO","$Tf -- authenticating_endpoint -- Authorizing source $si missing username\n");
    return(-1);
  }
  if(!$ar) {
    xlog("L_INFO","$Tf -- authenticating_endpoint -- Authorizing source $si username $aU missing realm\n");
    return(-1);
  }
  # Configuration-provided, custom endpoint_key fragment of code.
  $var(username) = $aU;
  $var(endpoint_key) = $var(username)+"@"+$ar;

  # Fragment may modify $var(endpoint_key), using $var(username).
  if fragment__endpoint_key
    ${fragment__endpoint_key}
  end if fragment__endpoint_key

  $avp(endpoint_key) = $var(endpoint_key);

  xlog("L_INFO","$Tf -- authenticating_endpoint -- Authorizing source $si using $avp(endpoint_key) \n");
  return(1);
}

# -----------------------------------
# Generic non-REGISTER authentication
# -----------------------------------

macro authenticate

route[authenticate_$1] {
  xlog("L_INFO","$Tf -- authenticate_$1 -- Looking up endpoint $si\n");
  $var(endpoint) = $si;
  ${get_id "endpoint:"+$si src_endpoint authenticate_continue_$1}
}

# doc.endpoint Is called `doc.src_endpoint` when used to route calls from an endpoint. See `doc.src_endpoint` and `session.endpoint` for the fields used in that case.
# doc.src_endpoint A referenced to doc.endpoint, used when routing from that endpoint.
# doc.src_endpoint The endpoint might be located based on its source IP address, in which case the endpoint's identifier is `endpoint:<source-ip>`.

route[authenticate_continue_$1] {
  ${save_id src_endpoint}

  if ignore_static_endpoints
  # Only process inbound_sbc
  if($json(src_endpoint/inbound_sbc)) {
    xlog("L_INFO","$Tf -- authenticate_continue_$1 -- inbound_sbc type $json(src_endpoint/inbound_sbc) at $si\n");
  } else {
    $json(src_endpoint) := '{}';
  }
  end if ignore_static_endpoints

  if( $json(src_endpoint/disabled) == "true" ) {
    send_reply("503", "Disabled");
    exit;
  }

  xlog("L_INFO","$Tf -- authenticate_continue_$1 -- Testing for sbc type $json(src_endpoint/sbc) at $si\n");
  switch($json(src_endpoint/sbc)) {

    case ${sbc_own_outbound}:
      xlog("L_INFO","$Tf -- authenticate_continue_$1 -- Not authenticating our own outbound SBC\n");
      route($1_authenticated);
      break;

    case ${sbc_csr_outbound}:
      xlog("L_INFO","$Tf -- authenticate_continue_$1 -- Not authenticating a customer outbound SBC\n");
      route($1_authenticated);
      break;

    default:
      xlog("L_INFO","$Tf -- authenticate_continue_$1 -- Using socket source IP = $si\n");
      route(authenticate_check_$1); # Authenticate customer
  }
}

# -----------------------------------------------------------------
# UAC Authentication (customer-side, "untrusted")
# -----------------------------------------------------------------

route[authenticate_check_$1] {
  xlog("L_INFO","$Tf -- authenticate_check_$1 -- Customer device from $si\n");

  # Check whether this is a customer-side trunk (S2S).
  # Do not authenticate if the endpoint is already known.
  if($json(src_endpoint/endpoint)) {
    xlog("L_INFO","$Tf -- authenticate_check_$1 -- IP $si is a customer endpoint\n");
    route($1_authenticated);
    exit;
  }

  if(route(authenticating_endpoint)) {
    ${get_id "endpoint:"+$avp(endpoint_key) src_endpoint authenticate_check_continue_$1}
  } else {
    xlog("L_INFO","$Tf -- authenticate_check_$1 -- challenging\n");
    proxy_challenge("$avp(realm)","0");
    exit;
  }
}

# doc.src_endpoint The endpoint might be located using authentication, in which case the endpoint's identifier is `endpoint:<username>@<endpoint-domain>`.

route[authenticate_check_continue_$1] {
  ${save_id src_endpoint}

  if( $json(src_endpoint/disabled) == "true" ) {
    xlog("L_WARN", "$Tf -- WARNING -- authenticate_check_continue_$1 -- $si endpoint disabled\n");
    send_reply("503", "Disabled");
    exit;
  }

  if(!$json(src_endpoint/endpoint)) {
    xlog("L_WARN", "$Tf -- WARNING -- authenticate_check_continue_$1 -- $si attempts to scan\n");
    send_reply("403", "Unauthorized");
    route(notify_authenticate_invalid);
    exit;
  }

  $var(password) = $json(src_endpoint/password);
  if (!pv_proxy_authorize("$avp(realm)")) {
    $var(code) = $retcode;
    xlog("L_INFO","$Tf -- authenticate_check_continue_$1 -- proxy_authorize failed: $si ($fu) $var(code)\n");
    proxy_challenge("$avp(realm)","0");
    exit;
  }

  if($json(src_endpoint/bypass_from_auth) == "true") {
    xlog("L_INFO","$Tf -- authenticate_check_continue_$1 -- not checking From username $fu against Authentication ID $aU@$ar\n");
  } else {
    if (!db_check_from()) {
        xlog("L_WARN", "$Tf -- WARNING -- authenticate_check_continue_$1 -- $si / $avp(endpoint_key) attempts to authenticate with invalid content\n");
        send_reply("403", "Unauthorized");
        route(notify_authenticate_invalid);
        exit;
    }
  }

  consume_credentials();

  if($json(src_endpoint/require_same_auth) == "true") {
    if( $si == $json(src_endpoint/user_ip) ) {
      xlog("L_INFO","$Tf -- authenticate_check_continue_$1 -- require_same_auth: $si matches with expected source IP\n");
    } else {
      xlog("L_INFO","$Tf -- authenticate_check_continue_$1 -- require_same_auth: $si does not match with expected $json(src_endpoint/user_ip)\n");
      send_reply("403","Incorrect source IP");
      route(notify_authenticate_invalid);
      exit;
    }
  }

  xlog("L_INFO","$Tf -- authenticate_check_continue_$1 -- Customer device $(json(src_endpoint)).\n");
  route($1_authenticated);
}

end macro authenticate

# -----------------------------
# Authenticate REGISTER
# -----------------------------

route[authenticate_register] {
  xlog("L_INFO","$Tf -- authenticate_register -- Customer device from $si\n");

  if(route(authenticating_endpoint)) {
    ${get_id "endpoint:"+$avp(endpoint_key) src_endpoint authenticate_register_continue}
  } else {
    xlog("L_INFO","$Tf -- authenticate_register -- challenging\n");
    www_challenge("$avp(realm)","0");
    exit;
  }
}

route[authenticate_register_continue] {
  ${save_id src_endpoint}

  if( $json(src_endpoint/disabled) == "true" ) {
    xlog("L_WARN", "$Tf -- WARNING -- authenticate_register_continue -- endpoint disabled\n");
    send_reply("401", "Unauthorized");
    route(notify_authenticate_invalid);
    exit;
  }

  if(!$json(src_endpoint/endpoint)) {
    xlog("L_WARN", "$Tf -- WARNING -- authenticate_register_continue -- $si attempts to scan\n");
    send_reply("401", "Unauthorized");
    route(notify_authenticate_invalid);
    exit;
  }

  $var(password) = $json(src_endpoint/password);
  if (!pv_www_authorize("$avp(realm)")) {
    $var(code) = $retcode;
    xlog("L_INFO", "$Tf -- authenticate_register_continue -- www_authorize failed: $si ($fu) $var(code)\n");
    www_challenge("$avp(realm)","0");
    exit;
  };

  if (!db_check_to()) {
    xlog("L_WARN", "$Tf -- WARNING -- authenticate_register_continue -- $si / $avp(endpoint_key) attempts to register with invalid content\n");
    send_reply("401", "Unauthorized");
    route(notify_authenticate_invalid);
    exit;
  }

  consume_credentials();

  xlog("L_INFO","$Tf -- authenticate_register_continue -- Customer device $(json(src_endpoint)).\n");
  route(register_authenticated);
}
