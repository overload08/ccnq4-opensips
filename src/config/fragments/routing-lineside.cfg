# Name: routing-lineside
# Description: INVITE handler for line-side (customer) termination

define try_line_side
define event_limits

route[try_line_side]
{
  xlog("L_INFO","-- try_line_side -- Attempting to locate $ru\n");

  # Use the `number_domain` provided by the client-sbc if present.
  if(is_present_hf("X-CCNQ3-Number-Domain")) {
    xlog("L_INFO","-- routing-lineside -- dst_number uses (header) number_domain $hdr(X-CCNQ3-Number-Domain)\n");
    $var(number_domain) = $hdr(X-CCNQ3-Number-Domain);
  }

  $var(local_number) = $rU+"@"+$var(number_domain);

  # Attempt to retrieve `dst` at once.
  if(cache_fetch("local","dst $var(local_number)",$avp(dst))) {
    $json(dst) := $avp(dst);
    route(continue_inbound);
    return;
  }

  # Build `dst`. Start with the local number.
  ${get_id "number:"+$var(local_number) dst_number resume_inbound_1}
}

route[resume_inbound_1] {
  ${save_id dst_number}
  $var(local_number) = $json(dst_number/number);

  if(!$json(dst_number/number)) {
    xlog("L_INFO","-- try_line_side -- Not line-side\n");
    # Normally not reached.
    xlog("L_ERR","-- invite-router -- src_type=trunk, fallback reached\n");
    send_reply("480", "Line Not Found");
    exit;
  }

  # Next, retrieve the endpoint.
  if( $json(dst_number/disabled) == "true" ) {
    send_reply("403", "Administratively Forbidden");
    exit;
  }

  $var(dst_endpoint) = $json(dst_number/endpoint);

  if( !$var(dst_endpoint) ) {
    send_reply("500", "Number has no endpoint");
    exit;
  }

  ${get_id "endpoint:"+$var(dst_endpoint) dst_endpoint resume_inbound_2}
}

route[resume_inbound_2] {
  ${save_id dst_endpoint}

  $var(dst_endpoint) = $json(dst_endpoint/endpoint);

  # Check the endpoint record for consistency.
  if( $json(dst_endpoint/disabled) == "true" ) {
    send_reply("403", "Administratively Forbidden");
    exit;
  }

  if( !$json(dst_endpoint/endpoint) || ($json(dst_endpoint/endpoint) != $var(dst_endpoint)) ) {
    send_reply("500", "Invalid destination endpoint");
    exit;
  }

  if( $json(dst_endpoint/dst_disabled) == "true" ) {
    send_reply("403", "Administratively Forbidden");
    exit;
  }

  # We retrieved both pieces, now bind them into a single object.
  $json(dst) := '{}';
  $json(dst/number) := $json(dst_number);
  $json(dst/endpoint) := $json(dst_endpoint);

  $avp(dst) := null;
  $avp(dst) = $json(dst);

  # And save that object in the cache.
  $var(local_number) = $json(dst/number/number);
  cache_store("local","dst $var(local_number)","$avp(dst)",${cache_timeout});

  # OK, now proceed.
  route(continue_inbound);
}

route[continue_inbound] {

  if( $json(dst/number/rate_limit) ) {
    if(!rl_check( "number_$json(dst/number/number)", "$json(dst/number/rate_limit)" )) {
      xlog("L_INFO","-- try_line_side -- Called Number Rate Limit Exceeded --\n");
      append_to_reply("Retry-After: ${rate_limit_latency}");
      send_reply("503","Called Number Rate Limit Exceeded");

      $avp(event-names) := null;
      $avp(event-values) := null;
      $avp(event-names) = "direction";
      $avp(event-values) = "called_number";
      $avp(event-names) = "number";
      $avp(event-values) = $json(dst/number/number);
      $avp(event-names) = "limit";
      $avp(event-values) = $json(dst/number/rate_limit);
      $avp(event-names) = "ip";
      $avp(event-values) = $si;
      raise_event("E_SCRIPT_NUMBER_RATE_LIMIT",$avp(event-names),$avp(event-values));
      exit;
    }
  }

  if( $json(dst/number/max_channels) ) {
    set_dlg_profile("number","$json(dst/number/number)");
    get_profile_size("number","$json(dst/number/number)","$avp(size)");
    if($avp(size) > $json(dst/number/max_channels)) {
        xlog("L_INFO","-- try_line_side -- Called Number Out-of-Channels --\n");
        send_reply("503","Called Number Out-of-Channels");

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "called_number";
        $avp(event-names) = "number";
        $avp(event-values) = $json(dst/number/number);
        $avp(event-names) = "max_channels";
        $avp(event-values) = $json(dst/number/max_channels);
        $avp(event-names) = "current_channels";
        $avp(event-values) = $avp(size);
        $avp(event-names) = "ip";
        $avp(event-values) = $si;
        raise_event("E_SCRIPT_NUMBER_OUT_OF_CHANNELS",$avp(event-names),$avp(event-values));
        exit;
    }
  }

  # Call rejection: reject anonymous caller
  if( $json(dst/number/reject_anonymous) == "true" ) {
    # There's more than one way to be anonymous.
    # Exclude Privacy=id
    if( is_privacy("id") ) {
      send_reply("603","Decline (anonymous)");
      exit;
    }
  }

  # Gather data for whitelist/blacklist
  if( $json(dst/number/use_blacklist) == "true" || $json(dst/number/use_whitelist) == "true" ) {
    # Check P-Asserted-Identity
    $var(list_id) = "list:$var(local_number)@$(hdr(P-Asserted-Identity){uri.user})";
    ${get_id $var(list_id) list resume_list_query}
  } else {
    route(resume_list);
  }
}

route[resume_list_query] {
  ${save_id list}

  if($json(list/disabled) == 'true') {
    $json(list) := '{}';
  }
  route(resume_list);
}

route[resume_list] {

  # Restore `dst`
  $json(dst) := $avp(dst);

  # Blacklisting of calling number
  if( $json(dst/number/use_blacklist) == "true" ) {
    if( $json(list/blacklist) ) {
      send_reply("603","Decline (blacklisted)");
      exit;
    }
  }

  # Whitelisting of calling number
  if( $json(dst/number/use_whitelist) == "true" ) {
    if( $json(list/whitelist) ) {
      send_reply("100","Whitelisted");
    } else {
      send_reply("603","Decline (not whitelisted)");
      exit;
    }
   }

  if( $json(dst/number/dialog_timer) ) {
    $DLG_timeout = $json(dst/number/dialog_timer);
  }

  set_dlg_profile("endpoint","$json(dst/endpoint/endpoint)");

  if( $json(dst/endpoint/rate_limit) ) {
    if(!rl_check( "endpoint_$json(dst/endpoint/endpoint)", "$json(dst/endpoint/rate_limit)" )) {
      xlog("L_INFO","-- try_line_side -- Called Endpoint Rate Limit Exceeded --\n");
      append_to_reply("Retry-After: ${rate_limit_latency}");
      send_reply("503","Called Endpoint Rate Limit Exceeded");

      $avp(event-names) := null;
      $avp(event-values) := null;
      $avp(event-names) = "direction";
      $avp(event-values) = "called_number";
      $avp(event-names) = "endpoint";
      $avp(event-values) = $json(dst/endpoint/endpoint);
      $avp(event-names) = "limit";
      $avp(event-values) = $json(dst/endpoint/rate_limit);
      $avp(event-names) = "ip";
      $avp(event-values) = $si;
      raise_event("E_SCRIPT_ENDPOINT_RATE_LIMIT",$avp(event-names),$avp(event-values));
      exit;
    }
  }

  if( $json(dst/endpoint/max_channels) ) {
    get_profile_size("endpoint","$json(dst/endpoint/endpoint)","$avp(size)");
    if($avp(size) > $json(dst/endpoint/max_channels)) {
        xlog("L_INFO","-- try_line_side -- Called Endpoint Out-of-Channels --\n");
        send_reply("503","Called Endpoint Out-of-Channels");

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "called_endpoint";
        $avp(event-names) = "endpoint";
        $avp(event-values) = $json(dst/endpoint/endpoint);
        $avp(event-names) = "max_channels";
        $avp(event-values) = $json(dst/endpoint/max_channels);
        $avp(event-names) = "current_channels";
        $avp(event-values) = $avp(size);
        $avp(event-names) = "ip";
        $avp(event-values) = $si;
        raise_event("E_SCRIPT_ENDPOINT_OUT_OF_CHANNELS",$avp(event-names),$avp(event-values));
        exit;
    }
  }

  # Call is accepted.

  $avp(cfa)  = $json(dst/number/cfa);
  $avp(cfb)  = $json(dst/number/cfb);
  $avp(cfda) = $json(dst/number/cfda);
  $avp(cfnr) = $json(dst/number/cfnr);
  if($json(dst/number/inv_timer)) {
    $T_fr_inv_timeout = $json(dst/number/inv_timer);
  }
  if($json(dst/number/timer)) {
    $T_fr_timeout = $json(dst/number/timer);
  }

  if($avp(cfb) || $avp(cfda)) {
    send_reply("180","Simulated Ringing in case of forwarding");
    setflag(flag_has_forwarding);
  }

  # No $avp(account) is available at this point.
  avp_delete("$(avp(account))");

  xlog("L_INFO","-- try_line_side -- dst/endpoint: $json(dst/endpoint/endpoint)\n");

  if( $json(dst/endpoint/user_force_mp) == "true" ) {
    xlog("L_INFO","-- try_line_side -- Force MediaProxy for $json(dst/endpoint)\n");
    setflag(flag_request_mp_callee); # force MP for callee
  }

  xlog("L_INFO","-- try_line_side -- dst/endpoint: $(json(dst/endpoint)) src_type: $(var(src_type))\n");
  route(line_side_invite); # Route towards line-side
  exit;
}

# Route towards line-side
route[line_side_invite]
{
  xlog("L_INFO","-- line_side_invite -- Routing to line-side\n");

  # Force to use the external socket info, if any.
  if external_ip
    force_send_socket(${external_ip});
  end if external_ip

  # If CFA is enabled, go that way
  if( $(avp(cfa)) ) {
    append_to_reply("Diversion: $ru;reason=unconditional\r\n");
    append_to_reply("Contact: $avp(cfa)\r\n");
    send_reply("302","Call Forward All");
    exit;
  }

  # If the target has a user_via, route through it
  if( $json(dst/endpoint/user_via) ) {
    append_to_reply("Diversion: $ru;reason=deflection\r\n");
    if( $json(dst/endpoint/user_srv) ) {
      $ru = 'sip:' + $rU + '-' + $json(dst/endpoint/user_srv) + '@' + $json(dst/endpoint/user_via);
    } else {
      $ru = 'sip:' + $rU + '-' + $json(dst/endpoint/user_ip) + '@' + $json(dst/endpoint/user_via);
    }

    route(initial_forwarder);
    exit;
  }

  # Save the original username in case we need it.
  $var(a) = $rU;

  # Use the regular destination RURI for lookup.
  $var(aor) = 'sip:' + $json(dst/endpoint/endpoint);

  # Translate the RURI into its proper destination (line-side).
  if lookup_on_password_only

    if( $json(dst/endpoint/password) ) {
      route(lookup);
    } else {
      xlog("L_INFO","-- line_side_invite -- no password field for endpoint $json(dst/endpoint/endpoint), skipping lookup --\n");
      route(static_line_side);
    }

  end if lookup_on_password_only
  if not lookup_on_password_only

    route(lookup);

  end if not lookup_on_password_only
}

# Does a lookup of $var(aor), modulo any local transformations, and fallbacks to `registered_static_line_side`.
route[lookup] {

  xlog("L_INFO","-- lookup -- lookup $var(aor)\n");

  ${simple_lookup lookup_continue}
}

route[lookup_continue] {
  $var(code) = $retcode;
  xlog("L_INFO","-- lookup -- simple_lookup returned $var(code)\n");
  switch ($var(code)) {
      case 1:
        xlog("L_INFO","-- lookup -- Contact found\n");
        # This is going to one of our users, ring them.
        $var(cleanup_headers) = 1;

        route(initial_forwarder);
        exit;
        break;

      # Contact found, method not supported.
      case -2:
        xlog("L_INFO","-- lookup -- Contact found, method not supported.\n");
        send_reply("405", "Not Found");
        exit;
        break;

      # No contact found
      case -1:
        route(registered_static_line_side);
        break;

      # Internal error
      case -3:
        route(registered_static_line_side);
        break;
  };
  xlog("L_INFO","-- lookup -- Unknwon return code $var(code) from lookup.\n");
  send_reply("500", "Unknown code $var(code)");
  exit;
}

/* Fallback to static from registration */

route[registered_static_line_side]
{
  xlog("L_INFO","-- registered_static_line_side)\n");
  if( $(avp(cfnr)) ) {
    xlog("L_INFO","-- registered_static_line_side -- Using CFNR\n");
    append_to_reply("Diversion: $ru;reason=unavailable\r\n");
    append_to_reply("Contact: $avp(cfnr)\r\n");
    send_reply("302","Not Registered");
    exit;
  }
  route(static_line_side);
}

/* Try to route to a static endpoint */

route[static_line_side]
{
  xlog("L_INFO","-- static_line_side\n");
  if( $json(dst/endpoint/user_srv) ) {
    xlog("L_INFO","-- static_line_side -- Using user_srv\n");
    $var(dst) = "sip:" + $var(a) + "@" + $json(dst/endpoint/user_srv);
    append_to_reply("Diversion: $ru;reason=deflection\r\n");
    append_to_reply("Contact: $var(dst)\r\n");
    send_reply("302","User SRV");
    exit;
  } else
  if( $json(dst/endpoint/user_ip) ) {
    xlog("L_INFO","-- static_line_side -- Using user_ip\n");
    $var(dst) = "sip:" + $var(a) + "@" + $json(dst/endpoint/user_ip);
    if( $json(dst/endpoint/user_port) ) {
        $var(dst) = $var(dst) + ":" + $json(dst/endpoint/user_port);
    }
    append_to_reply("Diversion: $ru;reason=deflection\r\n");
    append_to_reply("Contact: $var(dst)\r\n");
    send_reply("302","User IP");
    exit;
  } else {
      xlog("L_INFO","-- static_line_side -- Not found\n");
      send_reply("480", "User Not Found");
      exit;
  }
}
