# Name: routing-lineside
# Description: INVITE handler for line-side (customer) termination

define try_line_side

route[try_line_side]
{
  xlog("L_DBG","-- try_line_side -- Attempting to locate $ru\n");

  # Use the `number_domain` provided by the client-sbc if present.
  if(is_present_hf("X-CCNQ3-Number-Domain")) {
    xlog("L_DBG","-- routing-lineside -- dst_number uses (header) number_domain $hdr(X-CCNQ3-Number-Domain)\n");
    $var(number_domain) = $hdr(X-CCNQ3-Number-Domain);
  }

  $var(local_number) = $rU+"@"+$var(number_domain);
  route(retrieve_local_number);
  $json(dst_number) := $json(local_number);
  $json(local_number) = null;

  if(!$json(dst_number/number)) {
    xlog("L_DBG","-- try_line_side -- Not line-side\n");
    return;
  }

  if rate_limit
    if( $json(dst_number/rate_limit) ) {
      if(!rl_check( "number_$json(dst_number/number)", "$json(dst_number/rate_limit)" )) {
        xlog("L_DBG","-- try_line_side -- Called Number Rate Limit Exceeded --\n");

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "called_number";
        $avp(event-names) = "number";
        $avp(event-values) = "$json(dst_number/number)";
        $avp(event-names) = "limit";
        $avp(event-values) = "$json(dst_number/rate_limit)";
        $avp(event-names) = "ip";
        $avp(event-values) = "$si";
        raise_event("E_SCRIPT_NUMBER_RATE_LIMIT",$avp(event-names),$avp(event-values));

        append_to_reply("Retry-After: ${rate_limit_latency}");
        send_reply("503","Called Number Rate Limit Exceeded");
        exit;
      }
    }
  end if rate_limit

  if( $json(dst_number/max_channels) ) {
    set_dlg_profile("number","$json(dst_number/number)");
    get_profile_size("number","$json(dst_number/number)","$avp(size)");
    if($avp(size) > $json(dst_number/max_channels)) {
        xlog("L_DBG","-- try_line_side -- Called Number Out-of-Channels --\n");

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "called_number";
        $avp(event-names) = "number";
        $avp(event-values) = "$json(dst_number/number)";
        $avp(event-names) = "max_channels";
        $avp(event-values) = "$json(dst_number/max_channels)";
        $avp(event-names) = "current_channels";
        $avp(event-values) = "$avp(size)";
        $avp(event-names) = "ip";
        $avp(event-values) = "$si";
        raise_event("E_SCRIPT_NUMBER_OUT_OF_CHANNELS",$avp(event-names),$avp(event-values));

        send_reply("503","Called Number Out-of-Channels");
        exit;
    }
  }

  # Call rejection: reject anonymous caller
  if( $json(dst_number/reject_anonymous) == "true" ) {
    # There's more than one way to be anonymous.
    # Exclude Privacy=id
    if( is_privacy("id") ) {
      send_reply("603","Decline (anonymous)");
    }
  }

  # Gather data for whitelist/blacklist
  if( $json(dst_number/use_blacklist) == "true" || $json(dst_number/use_whitelist) == "true" ) {
    # Check P-Asserted-Identity
    $avp(list_key) = "$var(local_number)@$(hdr(P-Asserted-Identity){uri.user})";
    $var(__field) = 'list';
    $var(__key) = $avp(list_key);
    route(retrieve_json_field);
    $json(list) := $json(__value);
  }

  # Blacklisting of calling number
  if( $json(dst_number/use_blacklist) == "true" ) {
    if( $json(list/blacklist) ) {
      send_reply("603","Decline (blacklisted)");
    }
  }

  # Whitelisting of calling number
  if( $json(dst_number/use_whitelist) == "true" ) {
    if( $json(list/whitelist) ) {
      send_reply("100","Whitelisted");
    } else {
      send_reply("603","Decline (not whitelisted)");
    }
   }

  $DLG_timeout = $json(dst_number/dialog_timer);

  $var(dst_endpoint) = $json(dst_number/endpoint);
  if( !$var(dst_endpoint) ) {
    send_reply("500", "Number has no endpoint");
    exit;
  }

  $var(endpoint) = $var(dst_endpoint);
  route(retrieve_endpoint);
  $json(dst_endpoint) := $json(endpoint);

  if( !$json(dst_endpoint/endpoint) || ($json(dst_endpoint/endpoint) != $var(dst_endpoint)) ) {
    send_reply("500", "Invalid destination endpoint");
    exit;
  }

  if( $json(dst_endpoint/dst_disabled) == "true" ) {
    send_reply("403", "Administratively Forbidden");
    exit;
  }

  set_dlg_profile("endpoint","$json(dst_endpoint/endpoint)");

  if rate_limit
    if( $json(dst_endpoint/rate_limit) ) {
      if(!rl_check( "endpoint_$json(dst_endpoint/endpoint)", "$json(dst_endpoint/rate_limit)" )) {

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "called_number";
        $avp(event-names) = "endpoint";
        $avp(event-values) = "$json(dst_endpoint/endpoint)";
        $avp(event-names) = "limit";
        $avp(event-values) = "$json(dst_endpoint/rate_limit)";
        $avp(event-names) = "ip";
        $avp(event-values) = "$si";
        raise_event("E_SCRIPT_ENDPOINT_RATE_LIMIT",$avp(event-names),$avp(event-values));

        append_to_reply("Retry-After: ${rate_limit_latency}");
        send_reply("503","Service Unavailable");
        exit;
      }
    }
  end if rate_limit

  if( $json(dst_endpoint/max_channels) ) {
    get_profile_size("endpoint","$json(dst_endpoint/endpoint)","$avp(size)");
    if($avp(size) > $json(dst_endpoint/max_channels)) {
        xlog("L_DBG","-- try_line_side -- Called Endpoint Out-of-Channels --\n");

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "called_endpoint";
        $avp(event-names) = "endpoint";
        $avp(event-values) = "$json(dst_endpoint/endpoint)";
        $avp(event-names) = "max_channels";
        $avp(event-values) = "$json(dst_endpoint/max_channels)";
        $avp(event-names) = "current_channels";
        $avp(event-values) = "$avp(size)";
        $avp(event-names) = "ip";
        $avp(event-values) = "$si";
        raise_event("E_SCRIPT_ENDPOINT_OUT_OF_CHANNELS",$avp(event-names),$avp(event-values));

        send_reply("503","Called Endpoint Out-of-Channels");
        exit;
    }
  }

  # Call is accepted.

  $avp(cfa)  = $json(dst_number/cfa);
  $avp(cfb)  = $json(dst_number/cfb);
  $avp(cfda) = $json(dst_number/cfda);
  $avp(cfnr) = $json(dst_number/cfnr);
  $T_fr_inv_timeout = $json(dst_number/inv_timer);
  $T_fr_timeout = $json(dst_number/timer);

  if($avp(cfb) || $avp(cfda)) {
    send_reply("180","Simulated Ringing in case of forwarding");
    setflag(flag_has_forwarding);
  }

  # No $avp(account) is available at this point.
  avp_delete("$(avp(account))");

  xlog("L_DBG","-- try_line_side -- dst_endpoint: $json(dst_endpoint/endpoint)\n");

  if( $json(dst_endpoint/user_force_mp) == "true" ) {
    xlog("L_DBG","-- try_line_side -- Force MediaProxy for $json(dst_endpoint)\n");
    setflag(flag_request_mp_callee); # force MP for callee
  }

  xlog("L_DBG","-- try_line_side -- dst_endpoint: $(json(dst_endpoint)) src_type: $(var(src_type))\n");
  route(line_side_invite); # Route towards line-side
  exit;
}

# Route towards line-side
route[line_side_invite]
{
  xlog("L_DBG","-- line_side_invite -- Routing to line-side\n");

  # Force to use the external socket info, if any.
  if external_ip
    force_send_socket(${external_ip});
  end if external_ip

  # If CFA is enabled, go that way
  if( $(avp(cfa)) ) {
    append_to_reply("Diversion: $ru;reason=unconditional\r\n");
    append_to_reply("Contact: $avp(cfa)\r\n");
    send_reply("302","Call Forward All");
    exit;
  }

  # If the target has a user_via, route through it
  if( $json(dst_endpoint/user_via) ) {
    append_to_reply("Diversion: $ru;reason=deflection\r\n");
    if( $json(dst_endpoint/user_srv) ) {
      $ru = 'sip:' + $rU + '-' + $json(dst_endpoint/user_srv) + '@' + $json(dst_endpoint/user_via);
    } else {
      $ru = 'sip:' + $rU + '-' + $json(dst_endpoint/user_ip) + '@' + $json(dst_endpoint/user_via);
    }

    if mediaproxy
    route(media_proxy_in_ruri);
    route(update_media_proxy);   # Start MP if needed
    end if mediaproxy
    route(initial_forwarder);
    exit;
  }

  # Save the original username in case we need it.
  $var(a) = $rU;

  # Use the regular destination RURI for lookup.
  $var(aor) = $json(dst_endpoint/endpoint);

  # Translate the RURI into its proper destination (line-side).
  if lookup_on_password_only

    if( $json(dst_endpoint/password) ) {
      route(lookup);
    } else {
      xlog("L_DBG","-- line_side_invite -- no password field for endpoint $json(dst_endpoint/endpoint), skipping lookup --\n");
      route(static_line_side);
    }

  end if lookup_on_password_only
  if not lookup_on_password_only

    route(lookup);

  end if not lookup_on_password_only

  # This is going to one of our users, ring them.
  if mediaproxy
  route(update_media_proxy);   # Start MP if needed
  end if mediaproxy
  $var(cleanup_headers) = 1;

  route(initial_forwarder);
  exit;
}

# Does a lookup of $var(aor), modulo any local transformations, and fallbacks to `registered_static_line_side`.
route[lookup] {

  xlog("L_DBG","-- lookup -- lookup $var(aor)\n");

  route(simple_lookup);

  xlog("L_DBG","-- lookup -- simple_lookup returned $var(code)\n");
  switch ($var(code)) {
      case 1:
        xlog("L_DBG","-- lookup -- Contact found\n");
        break;

      # Contact found, method not supported.
      case -2:
        xlog("L_DBG","-- lookup -- Contact found, method not supported.\n");
        send_reply("405", "Not Found");
        exit;
        break;

      # No contact found
      case -1:
        route(registered_static_line_side);
        break;

      # Internal error
      case -3:
        route(registered_static_line_side);
        break;
  };
}

route[registered_static_line_side]
{
  xlog("L_DBG","-- registered_static_line_side)\n");
  if( $(avp(cfnr)) ) {
    xlog("L_DBG","-- registered_static_line_side -- Using CFNR\n");
    append_to_reply("Diversion: $ru;reason=unavailable\r\n");
    append_to_reply("Contact: $avp(cfnr)\r\n");
    send_reply("302","Not Registered");
    if mediaproxy
    route(stop_media_proxy);
    end if mediaproxy
    exit;
  }
  route(static_line_side);
}

route[static_line_side]
{
  xlog("L_DBG","-- static_line_side\n");
  if( $json(dst_endpoint/user_srv) ) {
    xlog("L_DBG","-- static_line_side -- Using user_srv\n");
    $var(dst) = "sip:" + $var(a) + "@" + $json(dst_endpoint/user_srv);
    append_to_reply("Diversion: $ru;reason=deflection\r\n");
    append_to_reply("Contact: $var(dst)\r\n");
    send_reply("302","User SRV");
    if mediaproxy
    route(stop_media_proxy);
    end if mediaproxy
    exit;
  } else
  if( $json(dst_endpoint/user_ip) ) {
    xlog("L_DBG","-- static_line_side -- Using user_ip\n");
    $var(dst) = "sip:" + $var(a) + "@" + $json(dst_endpoint/user_ip);
    if( $json(dst_endpoint/user_port) ) {
        $var(dst) = $var(dst) + ":" + $json(dst_endpoint/user_port);
    }
    append_to_reply("Diversion: $ru;reason=deflection\r\n");
    append_to_reply("Contact: $var(dst)\r\n");
    send_reply("302","User IP");
    if mediaproxy
    route(stop_media_proxy);
    end if mediaproxy
    exit;
  } else {
      xlog("L_DBG","-- static_line_side -- Not found\n");
      send_reply("480", "User Not Found");
      if mediaproxy
      route(stop_media_proxy);
      end if mediaproxy
      exit;
  }
}
