# Name: routing-lineside
# Description: INVITE handler for line-side (customer) termination

define try_line_side
define event_limits

route[try_line_side]
{
  xlog("L_INFO","$Tf -- try_line_side -- Attempting to locate $ru\n");

  $var(dst_endpoint) = $hdr(X-CCNQ3-Endpoint);

  if( !$var(dst_endpoint) ) {
    xlog("L_INFO","$Tf -- try_line_side -- $ru -- Missing Endpoint\n");
    send_reply("500", "Missing endpoint");
    exit;
  }

  ${get_id "endpoint:"+$var(dst_endpoint) dst_endpoint resume_inbound_2}
}

route[resume_inbound_2] {
  ${save_id dst_endpoint}

  if( !$json(dst_endpoint/endpoint) ) {
    xlog("L_INFO","$Tf -- resume_inbound_2 -- $ru -- Endpoint Error\n");
    send_reply("500","Endpoint Error");
    exit;
  }

  $var(dst_endpoint) = $json(dst_endpoint/endpoint);

  # Check the endpoint record for consistency.
  if( $json(dst_endpoint/disabled) == "true" ) {
    xlog("L_INFO","$Tf -- resume_inbound_2 -- $var(dst_endpoint) -- Endpoint disabled\n");
    send_reply("403", "Administratively Forbidden");
    exit;
  }

  if( $json(dst_endpoint/dst_disabled) == "true" ) {
    xlog("L_INFO","$Tf -- resume_inbound_2 -- $var(dst_endpoint) -- Endpoint dst_disabled\n");
    send_reply("403", "Administratively Forbidden");
    exit;
  }

  # OK, now proceed.
  route(continue_inbound);
}

route[continue_inbound] {

  set_dlg_profile("endpoint","$json(dst_endpoint/endpoint)");

  if( $json(dst_endpoint/rate_limit) ) {
    if(!rl_check( "endpoint_$json(dst_endpoint/endpoint)", "$json(dst_endpoint/rate_limit)" )) {
      xlog("L_INFO","$Tf -- try_line_side -- Called Endpoint Rate Limit Exceeded --\n");
      append_to_reply("Retry-After: ${rate_limit_latency}");
      send_reply("503","Called Endpoint Rate Limit Exceeded");

      $avp(event-names) := null;
      $avp(event-values) := null;
      $avp(event-names) = "direction";
      $avp(event-values) = "called_number";
      $avp(event-names) = "endpoint";
      $avp(event-values) = $json(dst_endpoint/endpoint);
      $avp(event-names) = "limit";
      $avp(event-values) = $json(dst_endpoint/rate_limit);
      $avp(event-names) = "ip";
      $avp(event-values) = $si;
      raise_event("E_SCRIPT_ENDPOINT_RATE_LIMIT",$avp(event-names),$avp(event-values));
      exit;
    }
  }

  if( $json(dst_endpoint/max_channels) ) {
    get_profile_size("endpoint","$json(dst_endpoint/endpoint)","$avp(size)");
    if($avp(size) > $json(dst_endpoint/max_channels)) {
        xlog("L_INFO","$Tf -- try_line_side -- Called Endpoint Out-of-Channels --\n");
        send_reply("503","Called Endpoint Out-of-Channels");

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "called_endpoint";
        $avp(event-names) = "endpoint";
        $avp(event-values) = $json(dst_endpoint/endpoint);
        $avp(event-names) = "max_channels";
        $avp(event-values) = $json(dst_endpoint/max_channels);
        $avp(event-names) = "current_channels";
        $avp(event-values) = $avp(size);
        $avp(event-names) = "ip";
        $avp(event-values) = $si;
        raise_event("E_SCRIPT_ENDPOINT_OUT_OF_CHANNELS",$avp(event-names),$avp(event-values));
        exit;
    }
  }

  # No $avp(account) is available at this point.
  avp_delete("$(avp(account))");

  # No sure we still fully support customer-side SBCs, but if we do..
  # then do not purge all headers just yet, let the SBC do it.
  # In all other cases, static or registered customers: clear the headers.
  if( !$json(dst_endpoint/sbc) ) {
    $var(cleanup_headers) = 1;
    remove_hf("P-Asserted-Identity");
  }

  xlog("L_INFO","$Tf -- try_line_side -- dst_endpoint: $json(dst_endpoint/endpoint)\n");

  if( $json(dst_endpoint/user_force_mp) == "true" ) {
    xlog("L_INFO","$Tf -- try_line_side -- Force MediaProxy for $json(dst_endpoint)\n");
    setflag(flag_request_mp_callee); # force MP for callee
  }

  xlog("L_INFO","$Tf -- try_line_side -- dst_endpoint: $(json(dst_endpoint)) src_type: $(var(src_type))\n");
  route(line_side_invite); # Route towards line-side
  exit;
}

# Route towards line-side
route[line_side_invite]
{
  xlog("L_INFO","$Tf -- line_side_invite -- Routing to line-side\n");

  # Force to use the external socket info, if any.
  if external_ip
    force_send_socket(${external_ip});
  end if external_ip

  # If the target has a user_via, route through it
  if( $json(dst_endpoint/user_via) ) {
    append_to_reply("Diversion: $ru;reason=deflection\r\n");
    if( $json(dst_endpoint/user_srv) ) {
      $ru = 'sip:' + $rU + '-' + $json(dst_endpoint/user_srv) + '@' + $json(dst_endpoint/user_via);
    } else {
      $ru = 'sip:' + $rU + '-' + $json(dst_endpoint/user_ip) + '@' + $json(dst_endpoint/user_via);
    }

    route(initial_forwarder);
    exit;
  }

  # Save the original username in case we need it.
  $var(a) = $rU;

  # Use the regular destination RURI for lookup.
  $var(aor) = 'sip:' + $json(dst_endpoint/endpoint);

  # Translate the RURI into its proper destination (line-side).
  if lookup_on_password_only

    if( $json(dst_endpoint/password) ) {
      route(lookup);
    } else {
      xlog("L_INFO","$Tf -- line_side_invite -- no password field for endpoint $json(dst_endpoint/endpoint), skipping lookup --\n");
      route(initial_forwarder);
    }

  end if lookup_on_password_only
  if not lookup_on_password_only

    route(lookup);

  end if not lookup_on_password_only
}

# Does a lookup of $var(aor), modulo any local transformations.
route[lookup] {

  xlog("L_INFO","$Tf -- lookup -- lookup $var(aor)\n");

  ${simple_lookup lookup_continue}
}

route[lookup_continue] {
  $var(code) = $retcode;
  xlog("L_INFO","$Tf -- lookup -- simple_lookup returned $var(code)\n");
  switch ($var(code)) {
      case 1:
        xlog("L_INFO","$Tf -- lookup -- Contact found\n");
        # This is going to one of our users, ring them.
        route(initial_forwarder);
        exit;
        break;

      # Contact found, method not supported.
      case -2:
        xlog("L_INFO","$Tf -- lookup -- Contact found, method not supported.\n");
        send_reply("405", "Not Found");
        exit;
        break;

      # No contact found
      case -1:
        send_reply("604","No contact found");
        exit;
        break;

      # Internal error
      case -3:
        send_reply("604","User lookup internal error");
        exit;
        break;
  };
  xlog("L_INFO","$Tf -- lookup -- Unknwon return code $var(code) from lookup.\n");
  send_reply("500", "Unknown code $var(code)");
  exit;
}
