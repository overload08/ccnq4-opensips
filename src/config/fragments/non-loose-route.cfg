# Name: non-loose-route
# Group: non-loose-route
# Description: handler for out-of-dialog (non loose-routed) messages

# -----------------------------------------------------------------
# Out-of-Dialog messages
# -----------------------------------------------------------------

# With local URI

${authenticate invite}

route[invite_authenticated] {
  xlog("L_INFO","$Tf -- invite_authenticated --\n");
  if has_dialog_module
  create_dialog("B");
  end if has_dialog_module
  route(invite_handler);   # INVITE message handler
  exit;
}

route[non_loose_route_handler] {
    xlog("L_INFO","$Tf -- non_loose_route_handler -- NLR $rm $ru (Call-ID $ci)\n");

    ## --- NAT

    route(nlr_nat);

    # A word about UPDATE and REFER.
    # UPDATE may appear inside an INVITE transaction (early-UPDATE), or inside a dialog (and then resembles a re-INVITE).
    # REFER may appear inside a dialog, or may create a new dialog.

    # These cannot be NLR in our config.
    # Especially, we do not support dialog-creating REFER.
    if( is_method("BYE") || is_method("REFER") || is_method("UPDATE") ) {
      send_reply("403", "Forbidden");
      exit;
    }

    if(is_method("OPTIONS")) {
      if options_200
      append_hf("Allow: INVITE, ACK, CANCEL, OPTIONS, BYE\r\n");
      send_reply("200","OK");
      end if options_200
      if not options_200
      send_reply("405","Method not allowed");
      end if not options_200
      exit;
    }

    if(has_totag()) {
      if not has_dialog_module
        send_reply("403", "No such dialog");
        exit;
      end if not has_dialog_module

      if has_dialog_module
      if($DLG_status==NULL) {

        # Out-of-dialog but in-transaction.
        xlog("L_INFO","$Tf -- NLR: to_tag but no dialog\n");

        # NLR ACK without dialog will happen if the original INVITE gets
        # a negative response: the dialog is deleted when the 4xx|5xx
        # response is received.
        # However the transaction persists in case of negative response.
        # forwarder_progress uses check_trans() for these cases.

        if has_forwarder
        if(is_method("ACK") || is_method("CANCEL") || is_method("PRACK") || is_method("UPDATE")) {
          route(forwarder_progress); # Route ACK/PRACK/CANCEL/UPDATE
          exit;
        }
        end if has_forwarder

        # Broken clients may set a to-tag on REGISTER.
        if ignore_broken_register
          if(is_method("REGISTER")) {
            xlog("L_INFO","$Tf -- ignoring broken REGISTER\n");
          } else {
        end if ignore_broken_register

        # Any other case is an error: to-tag but no dialog.
        send_reply("403", "No such dialog");
        exit;

        if ignore_broken_register
          }
        end if ignore_broken_register

      } else {

        # Non-loose-route, has to-tag, dialog should validate.

        # In-dialog
        if(!validate_dialog()) {
          if(!is_method("ACK")) {
            send_reply("403", "Invalid dialog");
          }
          # TBD report troublemaker
          exit;
        }
      }

      xlog("L_INFO","$Tf -- NLR: Validated Dialog\n");
      # fix_route_dialog();
      end if has_dialog_module
    } else {
      xlog("L_INFO","$Tf -- non_loose_route_handler -- Missing To-tag\n");
      # This is the generic case.
    }

    if(!is_method("ACK")) {
      send_reply("100", "Trying");
    }

    if(is_method("REGISTER")) {
      # We no longer support record-routed REGISTERs, our registrar models don't support/need it.
      # Use the To: username and domain for AOR.
      $var(aor) = 'sip:'+$tU+'@'+$td;
      route(register_handler);
      exit;
    }

    # Make sure we stay in the path.
    record_route();

    ## -- Authenticate methods

    # Apparently authenticating SUBSCRIBE and NOTIFY isn't very popular.

    # In any case, we terminate subscribe messages locally.
    if(is_method("SUBSCRIBE")) {
      if not voicemail_notifier
        send_reply("500", "Not implemented yet");
      end if not voicemail_notifier
      if voicemail_notifier
        # route(authenticate);
        send_reply("200","OK");
        send("${voicemail_notifier}");
      end if voicemail_notifier
      exit;
    }

    if(is_method("NOTIFY")) {
      if not voicemail_notifier
        send_reply("500", "Not implemented yet");
      end if not voicemail_notifier
      if voicemail_notifier

        # Right, FIXME, we need to make sure the NOTIFY comes from a valid voicemail-notifier.
        # And, FIXME, we should also route to static endpoints (and therefor the endpoint_key stuff should be made more generic).
        $var(aor) = 'sip:'+$tU+'@'+$td;
        ${simple_lookup voicemail_continue}
      end if voicemail_notifier
      exit;
    }

    if(is_method("INVITE")) {
      route(authenticate_invite);
      exit;
    }

    if has_forwarder
    if(is_method("ACK") || is_method("CANCEL") || is_method("PRACK") || is_method("UPDATE")) {
      route(forwarder_progress); # Route ACK/PRACK/CANCEL/UPDATE
      exit;
    }
    end if has_forwarder

    xlog("L_INFO","$Tf -- non_loose_route_handler: Unsupported method $rm\n");
    send_reply("501","Not implemented");
}

# With non-local URI

route[non_local_uri_handler] {
    xlog("L_INFO","$Tf -- non_local_uri_handler: Non-local RURI $ru\n");

    xlog("L_INFO","$Tf -- non_local_uri_handler: Relaying forbidden\n");
    if(is_method("INVITE") || is_method("REGISTER")) {
      # This isn't the proper response code, but it blocks buggers trying
      # to come in using IP addresses instead of domain names, for example.
      send_reply("200", "Relaying Forbidden");
    } else {
      send_reply("403", "Relaying Forbidden");
    }
}

if voicemail_notifier
route[voicemail_continue] {
  $var(code) = $retcode;
  xlog("L_INFO","$Tf -- voicemail_continue -- simple_lookup returned $var(code) --\n");
  if($var(code) == 1) {
    xlog("L_INFO","$Tf -- voicemail_continue -- forward() --\n");
    forward();
  } else {
    xlog("L_INFO","$Tf -- voicemail_continue -- 404 Not Found --\n");
    send_reply("404", "Not Found");
  }
}
end if voicemail_notifier
