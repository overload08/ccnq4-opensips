# Name: invite-router
# Group: invite_handlers
# Description: INVITE handler for a generic router

# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

route[invite_handler]
{
    xlog("L_DBG","-- invite-router -- $ru\n");

    t_on_failure("invite");
    t_on_reply("invite");

    set_dlg_profile("endpoint","$json(src_endpoint/endpoint)");

    # Attempt to locate the `number_domain` of the calling number,
    # assuming it is a local (on-net) number.
    if($json(src_endpoint/number_domain)) {
      xlog("L_DBG","-- invite-router -- src_number uses (endpoint) number_domain $json(src_endpoint/number_domain)\n");
      $var(number_domain) = $json(src_endpoint/number_domain);
    }

    $var(local_number) = $fU+"@"+$var(number_domain);
    route(retrieve_local_number);
    $json(src_number) := $json(local_number);
    $json(local_number) = null;

    route(classify_src);

    xlog("L_DBG","-- invite-router -- src_type = $var(src_type) --\n");
    if($var(src_type) == "line") {

      # Make sure end-users do not inject values into the switch.
      # (This is OK since we only support client-side or registrant, not LCR.)
      if(!($json(src_endpoint/keep_headers) == "true")) {
      $var(cleanup_headers) = 1;
      }

      if try_line_side
      if($json(src_endpoint/allow_onnet) == "true") {
        route(try_line_side);
      }
      end if try_line_side

      if try_trunk_side
      route(try_trunk_side);
      end if try_trunk_side

      # Normally not reached.
      xlog("L_ERR","-- invite-router -- src_type=line, fallback reached\n");
      send_reply("480", "Destination Not Found");
      exit;
    }

    if($var(src_type) == "trunk") {
      if try_line_side
      route(try_line_side);
      end if try_line_side

      # Normally not reached.
      xlog("L_ERR","-- invite-router -- src_type=trunk, fallback reached\n");
      send_reply("480", "Line Not Found");
      exit;
    }

    # Normally not reached.
    xlog("L_ERR","-- invite-router -- src_type= $var(src_type) is unknown\n");
    send_reply("500", "Unknown source type");
    exit;
}

route[classify_src]
{

  if rate_limit
    if( $json(src_number/rate_limit) ) {
      if(!rl_check( "number_$json(src_number/number)", "$json(src_number/rate_limit)" )) {
        append_to_reply("Retry-After: ${rate_limit_latency}");
        send_reply("503","Calling Number Rate Limit Exceeded");

        xlog("L_DBG","-- invite-router -- Calling Number Rate Limit Exceeded --\n");

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "calling_number";
        $avp(event-names) = "number";
        $avp(event-values) = "$json(src_number/number)";
        $avp(event-names) = "limit";
        $avp(event-values) = "$json(src_number/rate_limit)";
        $avp(event-names) = "ip";
        $avp(event-values) = "$si";
        raise_event("E_SCRIPT_NUMBER_RATE_LIMIT",$avp(event-names),$avp(event-values));

        exit;
      }
    }
    if( $json(src_endpoint/rate_limit) ) {
      if(!rl_check( "endpoint_$json(src_endpoint/endpoint)", "$json(src_endpoint/rate_limit)" )) {
        xlog("L_DBG","-- invite-router -- Calling Endpoint Rate Limit Exceeded --\n");

        append_to_reply("Retry-After: ${rate_limit_latency}");
        send_reply("503","Calling Endpoint Rate Limit Exceeded");

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "calling_endpoint";
        $avp(event-names) = "endpoint";
        $avp(event-values) = "$json(src_endpoint/endpoint)";
        $avp(event-names) = "limit";
        $avp(event-values) = "$json(src_endpoint/rate_limit)";
        $avp(event-names) = "ip";
        $avp(event-values) = "$si";
        raise_event("E_SCRIPT_ENDPOINT_RATE_LIMIT",$avp(event-names),$avp(event-values));

        exit;
      }
    }
  end if rate_limit

  if max_channels
    if( $json(src_number/max_channels) ) {
      set_dlg_profile("number","$json(src_number/number)");
      get_profile_size("number","$json(src_number/number)","$avp(size)");
      if($avp(size) > $json(src_number/max_channels)) {
        xlog("L_DBG","-- invite-router -- Calling Number Out-of-Channels --\n");

        send_reply("503","Calling Number Out-of-Channels");

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "calling_number";
        $avp(event-names) = "number";
        $avp(event-values) = "$json(src_number/number)";
        $avp(event-names) = "max_channels";
        $avp(event-values) = "$json(src_number/max_channels)";
        $avp(event-names) = "current_channels";
        $avp(event-values) = "$avp(size)";
        $avp(event-names) = "ip";
        $avp(event-values) = "$si";
        raise_event("E_SCRIPT_NUMBER_OUT_OF_CHANNELS",$avp(event-names),$avp(event-values));
        exit;
      }
    }
    if( $json(src_endpoint/max_channels) ) {
      get_profile_size("endpoint","$json(src_endpoint/endpoint)","$avp(size)");
      if($avp(size) > $json(src_endpoint/max_channels)) {
        xlog("L_DBG","-- invite-router -- Calling Endpoint Out-of-Channels --\n");

        send_reply("503","Calling Endpoint Out-of-Channels");

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "calling_endpoint";
        $avp(event-names) = "endpoint";
        $avp(event-values) = "$json(src_endpoint/endpoint)";
        $avp(event-names) = "max_channels";
        $avp(event-values) = "$json(src_endpoint/max_channels)";
        $avp(event-names) = "current_channels";
        $avp(event-values) = "$avp(size)";
        $avp(event-names) = "ip";
        $avp(event-values) = "$si";
        raise_event("E_SCRIPT_ENDPOINT_OUT_OF_CHANNELS",$avp(event-names),$avp(event-values));

        exit;
      }
    }
  end if max_channels

  # -- Inbound SBC
  if($json(src_endpoint/inbound_sbc) == ${sbc_own_upstream}) {
    $var(src_type) = "trunk";
    set_dlg_profile("inbound");
    # Also trust the charging information, if any (normally none is present).
    avp_delete("$(avp(account))");
    $avp(account)     = $(hdr(P-Charge-Info){uri.user}{s.unescape.user});
    return;
  }

  # -- Outbound call, coming from line-side
  if($json(src_endpoint/endpoint)) {
    $var(src_type) = "line";
    set_dlg_profile("outbound");
    if lineside_extra_info
    avp_printf("$(avp(extra_info))", "${lineside_extra_info}");
    end if lineside_extra_info

    if( $json(src_endpoint/disabled) == "true" ) {
      send_reply("503", "Disabled");
      exit;
    }

    if( $json(src_endpoint/src_disabled) == "true" ) {
      send_reply("403", "Administratively Forbidden");
      exit;
    }

    if( $json(src_endpoint/user_force_mp) == "true" ) {
      xlog("L_DBG","-- invite-router -- Force MediaProxy for $(json(src_endpoint/endpoint))\n");
      setflag(flag_request_mp_caller); # force MP for caller
    }

    if( $json(src_endpoint/check_from) == "true" ) {
      xlog("L_DBG","-- invite-router -- Checking From username\n");
      if( $json(src_number/endpoint) != $json(src_endpoint/endpoint) ) {
        send_reply("403", "From Username is not listed");
        exit;
      }
    }

    # Account selection
    avp_delete("$(avp(account))");

    switch($json(src_endpoint/sbc)) {
      case ${sbc_own_outbound}:
        # Trust the account information provided by this internal SBC.
        if($(hdr(P-Charge-Info))) {
          $avp(account)     = $(hdr(P-Charge-Info){uri.user}{s.unescape.user});
        }
        break;

      default:
        # Use the endpoint's account information.
        $avp(account)     = $json(src_endpoint/account);
    }
    #/ Account selection

    # Max call duration
    if( $json(src_endpoint/dialog_timer) ) {
      $DLG_timeout = $json(src_endpoint/dialog_timer);
    }

    xlog("L_DBG","-- invite-router -- Customer device $(json(src_endpoint)) with account $(avp(account)).\n");
  }
}
