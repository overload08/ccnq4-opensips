# Name: invite-router
# Group: invite_handlers
# Description: INVITE handler for a generic router

# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

define event_limits

route[invite_handler_local] {
  xlog("L_INFO","$Tf -- invite_handler_local -- $ru\n");

  route(apply_limits);

  # Make sure end-users do not inject values into the switch.
  # (This is OK since we only support client-side or registrant, not LCR.)
  if(!($json(src_endpoint/keep_headers) == "true")) {
    $var(cleanup_headers) = 1;
  }

  if try_trunk_side
  route(try_trunk_side);
  end if try_trunk_side

  # Normally not reached.
  xlog("L_ERR","$Tf -- invite-router -- src_type=line, fallback reached\n");
  send_reply("480", "Destination Not Found");
  exit;
}

route[invite_handler]
{
    xlog("L_INFO","$Tf -- invite_handler -- $ru\n");

    t_on_failure("invite");
    t_on_reply("invite");

    set_dlg_profile("endpoint","$json(src_endpoint/endpoint)");

    route(classify_src);

    xlog("L_INFO","$Tf -- invite-router -- src_type = $var(src_type) --\n");
    if($var(src_type) == "line") {
      route(invite_handler_local);
    }

    if($var(src_type) == "trunk") {
      if try_line_side
      route(try_line_side);
      end if try_line_side
    }

    # Normally not reached.
    xlog("L_ERR","$Tf -- invite-router -- src_type= $var(src_type) is unknown\n");
    send_reply("500", "Unknown source type");
    exit;
}

route[apply_limits] {
  xlog("L_INFO","-$Tf - apply_limits --\n");
    if( $json(src_endpoint/rate_limit) ) {
      if(!rl_check( "endpoint_$json(src_endpoint/endpoint)", "$json(src_endpoint/rate_limit)" )) {
        xlog("L_INFO","$Tf -- invite-router -- Calling Endpoint Rate Limit Exceeded --\n");

        append_to_reply("Retry-After: ${rate_limit_latency}");
        send_reply("503","Calling Endpoint Rate Limit Exceeded");

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "calling_endpoint";
        $avp(event-names) = "endpoint";
        $avp(event-values) = $json(src_endpoint/endpoint);
        $avp(event-names) = "limit";
        $avp(event-values) = $json(src_endpoint/rate_limit);
        $avp(event-names) = "ip";
        $avp(event-values) = $si;
        raise_event("E_SCRIPT_ENDPOINT_RATE_LIMIT",$avp(event-names),$avp(event-values));
        exit;
      }
    }

    if( $json(src_endpoint/max_channels) ) {
      get_profile_size("endpoint","$json(src_endpoint/endpoint)","$avp(size)");
      if($avp(size) > $json(src_endpoint/max_channels)) {
        xlog("L_INFO","$Tf -- invite-router -- Calling Endpoint Out-of-Channels --\n");

        send_reply("503","Calling Endpoint Out-of-Channels");

        $avp(event-names) := null;
        $avp(event-values) := null;
        $avp(event-names) = "direction";
        $avp(event-values) = "calling_endpoint";
        $avp(event-names) = "endpoint";
        $avp(event-values) = $json(src_endpoint/endpoint);
        $avp(event-names) = "max_channels";
        $avp(event-values) = $json(src_endpoint/max_channels);
        $avp(event-names) = "current_channels";
        $avp(event-values) = $avp(size);
        $avp(event-names) = "ip";
        $avp(event-values) = $si;
        raise_event("E_SCRIPT_ENDPOINT_OUT_OF_CHANNELS",$avp(event-names),$avp(event-values));
        exit;
      }
    }
}

route[classify_src]
{
  xlog("L_INFO","$Tf -- classify_src --\n");
  # -- Inbound SBC
  if($json(src_endpoint/inbound_sbc) == ${sbc_own_upstream}) {
    $var(src_type) = "trunk";
    set_dlg_profile("inbound");
    # Also trust the charging information, if any (normally none is present).
    $avp(account) := null;
    $avp(account)     = $(hdr(P-Charge-Info){uri.user}{s.unescape.user});
    return;
  }

  # -- Outbound call, coming from line-side
  if($json(src_endpoint/endpoint)) {
    $var(src_type) = "line";
    set_dlg_profile("outbound");
    if( $json(src_endpoint/disabled) == "true" ) {
      send_reply("503", "Disabled");
      exit;
    }

    if( $json(src_endpoint/src_disabled) == "true" ) {
      send_reply("403", "Administratively Forbidden");
      exit;
    }

# cfg.opensips.lineside_extra_info Second argument of OpenSIPS' pv_printf, used to populate hdr.X-CCNQ3-Extra
    if lineside_extra_info
    pv_printf("$(avp(extra_info))", "${lineside_extra_info}");
    end if lineside_extra_info

    if( $json(src_endpoint/user_force_mp) == "true" ) {
      xlog("L_INFO","$Tf -- invite-router -- Force MediaProxy for $(json(src_endpoint/endpoint))\n");
      setflag(flag_request_mp_caller); # force MP for caller
    }

    # Account selection
    $avp(account) := null;

    switch($json(src_endpoint/sbc)) {
      case ${sbc_own_outbound}:
        # Trust the account information provided by this internal SBC.
        if($(hdr(P-Charge-Info))) {
          $avp(account)     = $(hdr(P-Charge-Info){uri.user}{s.unescape.user});
        }
        break;

      default:
        # Use the endpoint's account information.
        $avp(account)     = $json(src_endpoint/account);
    }
    #/ Account selection

    # Max call duration
    if( $json(src_endpoint/dialog_timer) ) {
      $DLG_timeout = $json(src_endpoint/dialog_timer);
    }

    xlog("L_INFO","$Tf -- invite-router -- Customer device $(json(src_endpoint)) with account $(avp(account)).\n");
  }
}
