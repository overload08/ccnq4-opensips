#!/usr/bin/env coffee
# compiler.coffee -- merge OpenSIPS configuration fragments

definitions = (t,params) ->

  # Evaluate parameters
  t = t.replace /// \b define \s+ (\w+) \b ///g, (str,$1) ->
    if params[$1]? and params[$1] isnt 1
      throw new Error "Modifying variable $1 from #{params[$1]} to 1"
    params[$1] = 1
    return ''
  t = t.replace /// \b undef \s+ (\w+) \b ///g, (str,$1) ->
    if params[$1]? and params[$1] isnt 0
      throw new Error "Modifying variable $1 from #{params[$1]} to 0"
    params[$1] = 0
    return ''
  t = t.replace /// \b set \s+ (\w+) \s+ to \s+ (\w+) \b ///g, (str,$1,$2) ->
    if params[$1]? and params[$1] isnt $2
      throw new Error "Modifying variable $1 from #{params[$1]} to #{$2}"
    params[$1] = $2
    return ''

  t

conditionals = (t,params) ->
  # Since we don't use a real (LR) parser, these are sorted by match order.
  t = t.replace ///
    \b if \s+ not \s+ (\w+) \b
    ([\s\S]*?)
    \b end \s+ if \s+ not \s+ \1 \b
    ///g, (str,$1,$2) -> if not params[$1] then $2 else ''
  t = t.replace ///
    \b if \s+ (\w+) \s+ is \s+ not \s+ (\w+) \b
    ([\s\S]*?)
    \b end \s+ if \s+ \1 \s+ is \s+ not \s+ \2 \b
    ///g, (str,$1,$2,$3) -> if params[$1] isnt $2 then $3 else ''
  t = t.replace ///
    \b if \s+ (\w+) \s+ is \s+ (\w+) \b
    ([\s\S]*?)
    \b end \s+ if \s+ \1 \s+ is \s+ \2 \b
    ///g, (str,$1,$2,$3) -> if params[$1] is $2 then $3 else ''
  t = t.replace ///
    \b if \s+ (\w+) \b
    ([\s\S]*?)
    \b end \s+ if \s+ \1 \b
    ///g, (str,$1,$2) -> if params[$1] then $2 else ''
  t = t.replace ///
    \b for \s+ (\w+) \s+ in \s+ (\w+) \b
    ([\s\S]*?)
    \b end \s+ for \s+ \1 \s+ in \s+ \2 \b
    ///g, (str,$1,$2,$3) ->
      result = []
      if params[$2]?
        for value in params[$2]
          ctx = {}
          ctx[$1] = value
          result.push parameters $3, ctx
      result.join ''

  t

parameters = (t,params) ->
  # Substitute parameters
  t = t.replace /// \$ \{ (\w+) \} ///g, (str,$1) ->
    if params[$1]?
      return params[$1]
    else
      throw new Error "Undefined #{$1} in #{t}"

  t

configuration = (t,params) ->
  t = definitions t, params
  # Run conditionals twice to allow for two-level of conditionals (`if` inside `if`. `for` inside `if`, ..).
  t = conditionals t, params
  t = conditionals t, params
  t = parameters t, params
  t

### compile_cfg

    Build OpenSIPS configuration from fragments.

###

fs = require 'fs'
path = require 'path'


###

Special parameters:

- comment
- fragments[]

###

compile = (params) ->

  base_dir = path.dirname module.filename
  params.pkg_name = pkg.name
  params.pkg_version = pkg.version
  params.fragments ?= {}

  recipe = params.recipe
  assert recipe?, "Missing `recipe` in #{util.inspect params}"

  result =
    """
    #
    # Automatically generated configuration file.
    # #{pkg.name} #{pkg.version}
    #
    # #{params.comment}
    #
    # Includes: #{recipe.join ', '}
    #

    """

  for extension in ['variables','modules','cfg']
    for building_block in recipe
      filename = "#{building_block}.#{extension}"
      file = path.join base_dir, 'fragments', filename

      params.fragments[filename] ?= try fs.readFileSync file

      if params.fragments[filename]?
        fragment  = "\n## ---  Start #{file}  --- ##\n\n"
        fragment += params.fragments[filename]
        fragment += "\n## ---  End #{file}  --- ##\n\n"
        result += fragment

  return configuration result, params

###

  configure_opensips
    Subtitute configuration variables in a complete OpenSIPS configuration file
    (such as one generated by compile_cfg).

###

configure = (params) ->

  cfg_text = compile params

  fs.writeFileSync params.runtime_opensips_cfg, cfg_text

pkg = require '../../package.json'
assert = require 'assert'
util = require 'util'
module.exports = configure
module.exports.compile = compile
module.exports.definitions = definitions
module.exports.conditionals = conditionals
module.exports.parameters = parameters
module.exports.configuration = configuration
