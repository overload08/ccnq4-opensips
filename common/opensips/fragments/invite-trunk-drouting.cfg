# Name: invite-trunk-side
# DescriptioN: Failover using drouting

# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

define use_drouting

route[invite_trunk_drouting]
{
  xlog("L_DBG","-- route(invite_trunk_drouting)\n");

  $var(original_ru) = $ru;

  # remove any (transport,account,..) params from the RURI
  # ($rP contains current transport protocol)
  $var(clean_ru) = "sip:"+$rU+"@"+$rd+":"+$rp;

  if use_endpoint_outbound_route
  if($(json(src_endpoint/outbound_route)) != null) {
    $avp(outbound_route) = $(json(src_endpoint/outbound_route));
  }
  end if use_endpoint_outbound_route

  if use_default_outbound_route
    if($avp(outbound_route) == null) {
      $avp(outbound_route) = ${default_outbound_route};
    }
  end if use_default_outbound_route

  if use_domain_outbound_route
    if(!cache_fetch("local","domain $rd",$avp(domain))) {
      if(!avp_db_load("$rd","$avp(domain)")) {
        $avp(domain) := '{}';
      }
      cache_store("local","domain $rd","$avp(domain)",${cache_timeout});
    }

    $json(domain) := $avp(domain);
    if($json(domain/outbound_route) != null) {
      $avp(outbound_route) = $json(domain/outbound_route);
    }
  end if use_domain_outbound_route

  $var(route_ok) = 0;

  if special_drouting
  route(special_drouting);
  end if special_drouting

  $ru = $var(clean_ru);

  if($var(route_ok) == 0) {
    if( do_routing("")
     || ($(avp(outbound_route)) != null && do_routing("$(avp(outbound_route))")) ) {
      $var(route_ok) = 1;
    }
  }

  if($var(route_ok) == 1) {
    # Interpret attr fields as JSON
    if( !$avp(dr_rule_attrs) ) {
      $avp(dr_rule_attrs) := '{}';
    }
    if( !$avp(dr_carrier_attrs) ) {
      $avp(dr_carrier_attrs) := '{}';
    }
    if( !$avp(dr_gw_attrs) ) {
      $json(dr_gw_attrs) := '{}';
    }
    $json(dr_rule_attrs) := $avp(dr_rule_attrs);
    $json(dr_carrier_attrs) := $avp(dr_carrier_attrs);
    $json(dr_gw_attrs) := $avp(dr_gw_attrs);
    $avp(dr_rule_attrs) := null;
    $avp(dr_carrier_attrs) := null;
    $avp(dr_gw_attrs) := null;

    # Force send through
    if internal_ip
      force_send_socket(${internal_ip});
    end if internal_ip

    xlog("L_DBG","-- route(invite_trunk_drouting): do_routing was successful: $ru\n");
    setflag(${flag_trunk_routing});
    t_on_branch("1");
    route(trunk_attributes);
    if mediaproxy
    route(update_media_proxy);  # Start MP if needed
    end if mediaproxy
    route(initial_forwarder);   # Forward
    exit;
  }

  $ru = $var(original_ru);
}

route[trunk_attributes]
{
  xlog("L_DBG","-- route(trunk_attributes)\n");
  if($json(dr_rule_attrs/force_mp)) {
    xlog("L_DBG","-- route(trunk_attributes) -- forcing MediaProxy for route\n");
    setflag(${flag_request_mp_callee}); # force MP for callee
  }
  if not skip_uac_auth
    # Per-provider authentication
    xlog("L_DBG","-- route(trunk_attributes) -- gathering authentication\n");
    $avp(uac_realm) = $json(dr_gw_attrs/realm);
    $avp(uac_username) = $json(dr_gw_attrs/username);
    $avp(uac_password) = $json(dr_gw_attrs/password);
  end if not skip_uac_auth

}

branch_route[1]
{
    xlog("L_DBG","-- branch_route(1) Processing $rm $ru\n");
}
