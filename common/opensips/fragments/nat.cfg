# Name: nat
# Group: nat
# Description: handler for messages originating or terminating behind NAT

# -----------------------------------------------------------------
# NAT Traversal Section
# -----------------------------------------------------------------

route[nlr_nat]
{
  xlog("L_DBG","-- nlr_nat -- NAT tests for NLR $rm\n");

  if(is_method("CANCEL")||is_method("PRACK")||is_method("UPDATE")) {
    route(lr_detect_nat);
    return;
  }
  if(is_method("ACK")) {
    route(ack_nat);
    return;
  }
  route(initial_nat);
}

route[nat_keepalive] {
    if(is_method("REGISTER")||is_method("SUBSCRIBE")||is_method("INVITE")) {
      if(proto==UDP) { nat_keepalive(); }
    }
}

route[initial_nat] # NAT traversal for initial INVITE/SUBSCRIBE/NOTIFY/OPTIONS
{
  xlog("L_DBG","-- initial_nat -- NAT tests for initial $rm\n");

  # NAT tests:
  # NAT test 1 = RFC1918 IP in Contact ?
  # NAT test 2 = From address != 1st Via
  if (client_nat_test("3") && !search("^Record-Route:")) {
    xlog("L_DBG","-- initial_nat-- $rm sender is NATed\n");

    # Record what we found.
    # (For IPv6 at this time we always proxy media if we can.)
    setflag(${flag_request_mp_caller});

    if(af!=INET6) {
      # NAT detected
      force_rport();
      route(nat_keepalive);
    }
    fix_contact();
  }
}


route[lr_nat] # NAT traversal for loose-routed messages
{
  xlog("L_DBG","-- lr_nat -- NAT tests for LR $rm\n");

  if(is_method("INVITE")) {
    # This might be overkill
    route(initial_nat);
    return;
  }
  if(is_method("ACK")) {
    route(ack_nat);
    return;
  }
  route(lr_detect_nat);
}

route[lr_detect_nat] {
  xlog("L_DBG","-- lr_detect_nat --\n");

  # NAT test 1 = RFC1918 IP in Contact ?
  # NAT test 2 = From address != 1st Via ?
  if (client_nat_test("3")) {
    xlog("L_DBG","-- lr_detect_nat -- $rm sender is NATed\n");

    # XXX Shouldn't we set some flag somewhere?

    if(af!=INET6) {
      # NAT detected
      force_rport();
      route(nat_keepalive);
    }
    fix_contact();
  }
}


route[ack_nat] {
  xlog("L_DBG","-- ack_nat --\n");

  # Handle NAT on ACK
  xlog("L_DBG","-- ack_nat\n");
  if(isflagset(${flag_request_mp_caller})) {
    if(af!=INET6) {
      force_rport();
      route(nat_keepalive);
    }
  }
  if (client_nat_test("11")) {
    fix_contact();
  }
}

define has_register_nat
route[register_nat] {
  xlog("L_DBG","-- register_nat --\n");

  # NAT test 1 = RFC1918 IP in Contact ?
  # NAT test 2 = From address != 1st Via ?
  # NAT test 4 = RFC1918 in top Via ?
  if (client_nat_test("7") && !search("^Contact:[ ]*\*")) {
      xlog("L_DBG","-- register_nat: Registering device is NATed\n");
      setbflag(${bflag_request_mp_callee}); # endpoint is NATed (stored in the database by registrar)
      if(af!=INET6) {
        force_rport();
        route(nat_keepalive);
        if(proto==TCP) {
          setflag(${flag_tcp_persistent}); # tcp_persistent_flag
        }
      }
      $avp(received_avp) = $source_uri;
  };
}

define has_onreply_nat
route[onreply_nat] {

  xlog("L_DBG","-- onreply_nat --\n");

      # NAT test 1 = RFC1918 IP in Contact ?
      if( client_nat_test("1") ) {
        fix_contact();
      }

}
