# Name: register-colocted
# Group: register-handler
# Description: REGISTER handler for a colocated registrar

# -----------------------------------------------------------------
# REGISTER Message Handler: Router and registrar co-located
# -----------------------------------------------------------------

# Router and registrar are co-located

  # REGISTER messages are processed locally.
define do_not_forward_register

route[register_handler]
{
    xlog("L_DBG","-- register_handler -- REGISTER Message Handler from $source_uri\n");

    if has_register_nat
    route(register_nat);
    end if has_register_nat

    if( if has_trusted allow_trusted() || end if has_trusted 0 ) {
        xlog("L_WARN", "WARNING -- register_handler -- Trusted device $si ($fu) attempts to register\n");
    } else {
      route(authenticate_register);

      if (!db_check_to()) {
        xlog("L_WARN", "WARNING -- register_handler -- Rogue device $si ($fu) attempts to register\n");
        t_reply("401", "Unauthorized");
        exit;
      };
    }

  if min_expires
    $var(expires) = 0;
    if( is_present_hf("Expires") && $(hdr(Expires){s.int}) > 0 ) {
      $var(expires) = $(hdr(Expires){s.int});
    }
    if( $ct.fields(expires) && $(ct.fields(expires){s.int}) > 0 ) {
      $var(expires) = $(ct.fields(expires){s.int});
    }
    # var(expires) might be 0 if no Expires was found,
    # or if Expires was 0, which means un-register.
    if( $var(expires) > 0 && $var(expires) < ${min_expires} ) {
      append_hf("Min-Expires: ${min_expires}");
      t_reply("423","Interval Too Brief");
      exit;
    }

  end if min_expires

  if register_check_ip
    if( $json(src_endpoint/check_ip) == "true" ) {
      if( $si != $json(src_endpoint/user_ip) ) {

        if notify
          # Cache the last IP seen for each endpoint, to reduce the number of events sent upstream.
          $avp(last_source) := null;
          if(!cache_fetch("local","register $json(src_endpoint/endpoint)",$avp(last_source)) || $avp(last_source) != $si) {
            $avp(event-names) := null;
            $avp(event-values) := null;
            $avp(event-names) = "event";
            $avp(event-values) = "check_ip";
            $avp(event-names) = "endpoint";
            $avp(event-values) = "$json(src_endpoint/endpoint)";
            $avp(event-names) = "ip";
            $avp(event-values) = "$si";
            raise_event("E_SCRIPT_REPORT",$avp(event-names),$avp(event-values));
            cache_store("local","register $json(src_endpoint/endpoint)","$si",${cache_timeout});
          }
        end if notify

        t_reply("403","Invalid Source");
        exit;
      }
    }
  end if register_check_ip

  if has_usrloc

    if( !save("${usrloc_table}","${usrloc_flags}") ) {
      xlog("L_ERR", "ERROR -- register_handler -- could not save location $si ($fu).\n");
      t_reply("500", "Could not save location");
      exit;
    }
  end if has_usrloc
  exit;
}

# Co-located

route[lookup] {
  if( $json(dst_endpoint/password) ) {

  xlog("L_DBG","-- lookup -- Lookup $var(aor)\n");

  lookup("${usrloc_table}","","$var(aor)");
  $var(code) = $retcode;

  xlog("L_DBG","-- lookup -- Lookup returned $var(code)\n");
  switch ($var(code)) {
      case 1:
        xlog("L_DBG","-- lookup -- Contact found\n");
        break;

      # Contact found, method not supported.
      case -2:
        xlog("L_DBG","-- lookup -- Contact found, method not supported.\n");
        t_reply("405", "Not Found");
        exit;
        break;

      # No contact found
      case -1:
        $var(replace_404_with_486) = 1;
      # Internal error
      case -3:
        route(registered_static_line_side);
        break;
  };

  }
}
